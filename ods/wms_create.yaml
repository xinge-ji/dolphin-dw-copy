workflow:
    name: wms_manual_create
    project: wms_ods
    run: true

tasks:
  - name: TMS_DISPATCH_DTL
    task_type: SeaTunnel
    fail_retry_times: 1
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: NO
    deps: []
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lywms"
            password = "lywms"
            table_path = "lywms.TMS_DISPATCH_DTL"
            query = """SELECT t.DISPATCHDTLID, ora_hash(substr(coalesce(substr(to_char(t.DISPATCHID), 1,255), '') || coalesce(substr(to_char(t.DISPATCHDTLID), 1,255), '') || coalesce(substr(to_char(t.TASKTYPE), 1,255), '') || coalesce(substr(to_char(t.TRID), 1,255), '') || coalesce(substr(to_char(t.SCATTERPACKS), 1,255), '') || coalesce(substr(to_char(t.WHOLEPACKS), 1,255), '') || coalesce(substr(to_char(t.WEIGHT), 1,255), '') || coalesce(substr(to_char(t.CUBAGE), 1,255), '') || coalesce(substr(to_char(t.BACKMAN), 1,255), '') || coalesce(substr(to_char(t.BACKTIME), 1,255), '') || coalesce(substr(to_char(t.BACKDESCR), 1,255), '') || coalesce(substr(to_char(t.MEMO), 1,255), '') || coalesce(substr(to_char(t.STEVEDORE), 1,255), '') || coalesce(substr(to_char(t.USESTATUS), 1,255), '') || coalesce(substr(to_char(t.FIXQTY), 1,255), '') || coalesce(substr(to_char(t.EMPLOYEENAMES), 1,255), '') || coalesce(substr(to_char(t.INPUTMANID), 1,255), '') || coalesce(substr(to_char(t.BACKQTY), 1,255), '') || coalesce(substr(to_char(t.RECEIVEMONEY), 1,255), '') || coalesce(substr(to_char(t.SIGNFLAG), 1,255), '') || coalesce(substr(to_char(t.CHAINFLAG), 1,255), '') || coalesce(substr(to_char(t.FILEGROUPID), 1,255), '') || coalesce(substr(to_char(t.WAYBILLNO), 1,255), '') || coalesce(substr(to_char(t.CHAINHZFLAG), 1,255), '') || coalesce(substr(to_char(t.FFZJHZFLAG), 1,255), '') || coalesce(substr(to_char(t.CHAINUSESTATUS), 1,255), '') || coalesce(substr(to_char(t.SIGNDATE), 1,255), '') || coalesce(substr(to_char(t.DEVNUM), 1,255), '') || coalesce(substr(to_char(t.STARTDATE), 1,255), '') || coalesce(substr(to_char(t.ENDDATE), 1,255), '') || coalesce(substr(to_char(t.CARFLAG), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active, t.DISPATCHID, t.TASKTYPE, t.TRID, t.SCATTERPACKS, t.WHOLEPACKS, t.WEIGHT, t.CUBAGE, t.BACKMAN, t.BACKTIME, t.BACKDESCR, t.MEMO, t.STEVEDORE, t.USESTATUS, t.FIXQTY, t.EMPLOYEENAMES, t.INPUTMANID, t.BACKQTY, t.RECEIVEMONEY, t.SIGNFLAG, t.CHAINFLAG, t.FILEGROUPID, t.WAYBILLNO, t.CHAINHZFLAG, t.FFZJHZFLAG, t.CHAINUSESTATUS, t.SIGNDATE, t.DEVNUM, t.STARTDATE, t.ENDDATE, t.CARFLAG, t1.CREDATE FROM TMS_DISPATCH_DTL t LEFT JOIN TMS_DISPATCH_DOC t1 ON t.DISPATCHID = t1.DISPATCHID"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_wms"
            table = "${table_name}"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(DISPATCHDTLID,DW_ID)
              DISTRIBUTED BY HASH (DISPATCHDTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: WMS_ECODE_RECORD_ods
    task_type: SeaTunnel
    fail_retry_times: 2
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: NO
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lywms"
            password = "lywms"
            table_path = "lywms.WMS_ECODE_RECORD"
            query = """select t.RECORDID, ora_hash(substr(coalesce(substr(to_char(t.RECORDID), 1,255), '') || coalesce(substr(to_char(t.INOUTID), 1,255), '') || coalesce(substr(to_char(t.ECODE), 1,255), '') || coalesce(substr(to_char(t.CREDATE), 1,255), '') || coalesce(substr(to_char(t.EXPFLAG), 1,255), '') || coalesce(substr(to_char(t.QTY), 1,255), '') || coalesce(substr(to_char(t.SOURCEID), 1,255), '') || coalesce(substr(to_char(t.INOUTFLAG), 1,255), '') || coalesce(substr(to_char(t.INPUTMANID), 1,255), '') || coalesce(substr(to_char(t.EXPDATE), 1,255), '') || coalesce(substr(to_char(t.EXPMANID), 1,255), '') || coalesce(substr(to_char(t.GOODSID), 1,255), '') || coalesce(substr(to_char(t.COMEFROM), 1,255), '') || coalesce(substr(to_char(t.SPECIALFLAG), 1,255), '') || coalesce(substr(to_char(t.AUTOTASKFLAG), 1,255), '') || coalesce(substr(to_char(t.SOURCERECORDID), 1,255), '') || coalesce(substr(to_char(t.OWNERGOODSID), 1,255), '') || coalesce(substr(to_char(t.LOTID), 1,255), '') || coalesce(substr(to_char(t.OPERATIONTYPE), 1,255), '') || coalesce(substr(to_char(t.WAREHID), 1,255), '') || coalesce(substr(to_char(t.GOODSOWNERID), 1,255), '') || coalesce(substr(to_char(t.COMPANYID), 1,255), '') || coalesce(substr(to_char(t.INID), 1,255), '') || coalesce(substr(to_char(t.INDTLID), 1,255), '') || coalesce(substr(to_char(t.RECEIVEID), 1,255), '') || coalesce(substr(to_char(t.OUTID), 1,255), '') || coalesce(substr(to_char(t.OUTDTLID), 1,255), '') || coalesce(substr(to_char(t.WAVEDTLID), 1,255), '') || coalesce(substr(to_char(t.SRCEXPNO), 1,255), '') || coalesce(substr(to_char(t.UPDATEFLAG), 1,255), '') || coalesce(substr(to_char(t.UPDATEDATE), 1,255), '') || coalesce(substr(to_char(t.UPDATEMSG), 1,255), '') || coalesce(substr(to_char(t.GOODSPACKID), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.INOUTID,t.ECODE,t.CREDATE,t.EXPFLAG,t.QTY,t.SOURCEID,t.INOUTFLAG,t.INPUTMANID,t.EXPDATE,t.EXPMANID,t.GOODSID,t.COMEFROM,t.SPECIALFLAG,t.AUTOTASKFLAG,t.SOURCERECORDID,t.OWNERGOODSID,t.LOTID,t.OPERATIONTYPE,t.WAREHID,t.GOODSOWNERID,t.COMPANYID,t.INID,t.INDTLID,t.RECEIVEID,t.OUTID,t.OUTDTLID,t.WAVEDTLID,t.SRCEXPNO,t.UPDATEFLAG,t.UPDATEDATE,t.UPDATEMSG,t.GOODSPACKID from WMS_ECODE_RECORD t"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_wms"
            table = "${table_name}"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(RECORDID,DW_ID)
              DISTRIBUTED BY HASH (RECORDID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 3",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: WMS_WAVE_GOODS_DTL_ods
    task_type: SeaTunnel
    fail_retry_times: 2
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: NO
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lywms"
            password = "lywms"
            table_path = "lywms.WMS_WAVE_GOODS_DTL"
            query = """select t.WAVEGOODSDTLID, ora_hash(substr(coalesce(substr(to_char(t.WAVEDTLID), 1,255), '') || coalesce(substr(to_char(t.WAVEGOODSDTLID), 1,255), '') || coalesce(substr(to_char(t.OWNERGOODSID), 1,255), '') || coalesce(substr(to_char(t.GOODSID), 1,255), '') || coalesce(substr(to_char(t.GOODSPACKID), 1,255), '') || coalesce(substr(to_char(t.BATCHNO), 1,255), '') || coalesce(substr(to_char(t.LOTID), 1,255), '') || coalesce(substr(to_char(t.GOODSSTATUSID), 1,255), '') || coalesce(substr(to_char(t.QUANTITYSTATUS), 1,255), '') || coalesce(substr(to_char(t.GOODSQTY), 1,255), '') || coalesce(substr(to_char(t.WHOLEQTY), 1,255), '') || coalesce(substr(to_char(t.SCATTERQTY), 1,255), '') || coalesce(substr(to_char(t.USESTATUS), 1,255), '') || coalesce(substr(to_char(t.SORTTYPE), 1,255), '') || coalesce(substr(to_char(t.ADDMEDCHECKFLAG), 1,255), '') || coalesce(substr(to_char(t.PRINTFLAG), 1,255), '') || coalesce(substr(to_char(t1.PRINTDATE), 1,255), '') || coalesce(substr(to_char(t.PRINTMANID), 1,255), '') || coalesce(substr(to_char(t.GOODSOWNERID), 1,255), '') || coalesce(substr(to_char(t.FLAG), 1,255), '') || coalesce(substr(to_char(t.YJDEXPFLAG), 1,255), '') || coalesce(substr(to_char(t.SOURCEWAVEGOODSDTLID), 1,255), '') || coalesce(substr(to_char(t.AUTOTASKFLAG), 1,255), '') || coalesce(substr(to_char(t.AUTOCREDATE), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.WAVEDTLID,t.OWNERGOODSID,t.GOODSID,t.GOODSPACKID,t.BATCHNO,t.LOTID,t.GOODSSTATUSID,t.QUANTITYSTATUS,t.GOODSQTY,t.WHOLEQTY,t.SCATTERQTY,t.USESTATUS,t.SORTTYPE,t.ADDMEDCHECKFLAG,t.PRINTFLAG,t.PRINTMANID,t.GOODSOWNERID,t.FLAG,t.YJDEXPFLAG,t.SOURCEWAVEGOODSDTLID,t.AUTOTASKFLAG,t.AUTOCREDATE,t2.CREDATE,t1.PRINTDATE from WMS_WAVE_GOODS_DTL t JOIN WMS_WAVE_DTL t1 ON t1.WAVEDTLID = t.WAVEDTLID JOIN WMS_WAVE_DOC t2 ON t1.WAVEID = t2.WAVEDOCID"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_wms"
            table = "${table_name}"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(WAVEGOODSDTLID,DW_ID)
              DISTRIBUTED BY HASH (WAVEGOODSDTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 3",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: WMS_OUT_ORDER_DTL_d
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lywms"
            password = "lywms"
            table_path = "lywms.WMS_OUT_ORDER_DTL"
            query = """select t.OUTDTLID, ora_hash(substr(coalesce(substr(to_char(t.OUTID), 1,255), '') || coalesce(substr(to_char(t.OUTDTLID), 1,255), '') || coalesce(substr(to_char(t.WAREHID), 1,255), '') || coalesce(substr(to_char(t.GOODSOWNERID), 1,255), '') || coalesce(substr(to_char(t.GOODSID), 1,255), '') || coalesce(substr(to_char(t.OWNERGOODSID), 1,255), '') || coalesce(substr(to_char(t.BATCHNO), 1,255), '') || coalesce(substr(to_char(t.LOTID), 1,255), '') || coalesce(substr(to_char(t.LOTNO), 1,255), '') || coalesce(substr(to_char(t.VALIDDATE), 1,255), '') || coalesce(substr(to_char(t.GOODSSTATUSID), 1,255), '') || coalesce(substr(to_char(t.QUANTITYSTATUS), 1,255), '') || coalesce(substr(to_char(t.PRICE), 1,255), '') || coalesce(substr(to_char(t.GOODSQTY), 1,255), '') || coalesce(substr(to_char(t.GOODSPACKID), 1,255), '') || coalesce(substr(to_char(t.REALQTY), 1,255), '') || coalesce(substr(to_char(t.TRADEGOODSQTY), 1,255), '') || coalesce(substr(to_char(t.TRADEGOODSPACK), 1,255), '') || coalesce(substr(to_char(t.STOCKQTY), 1,255), '') || coalesce(substr(to_char(t.CUSTCANCELSTATUS), 1,255), '') || coalesce(substr(to_char(t.WMSCANCELSTATUS), 1,255), '') || coalesce(substr(to_char(t.ADDMEDCHECKFLAG), 1,255), '') || coalesce(substr(to_char(t.SRCEXPDTLNO), 1,255), '') || coalesce(substr(to_char(t.USESTATUS), 1,255), '') || coalesce(substr(to_char(t.PRINTFLAG), 1,255), '') || coalesce(substr(to_char(t.PRINTERROR), 1,255), '') || coalesce(substr(to_char(t.DISTRIBUTEID), 1,255), '') || coalesce(substr(to_char(t.DISTRIBUTEDTLID), 1,255), '') || coalesce(substr(to_char(t.RETAILPRICE), 1,255), '') || coalesce(substr(to_char(t.AMT), 1,255), '') || coalesce(substr(to_char(t.ALLOCATETIME), 1,255), '') || coalesce(substr(to_char(t.FAILREASON), 1,255), '') || coalesce(substr(to_char(t.EXPDTLMEMO), 1,255), '') || coalesce(substr(to_char(t.PLACESUPPLYID), 1,255), '') || coalesce(substr(to_char(t.PLACESUPPLYDTLID), 1,255), '') || coalesce(substr(to_char(t.PLACEPRICE), 1,255), '') || coalesce(substr(to_char(t.RESALEPRICE), 1,255), '') || coalesce(substr(to_char(t.PLACEMONEY), 1,255), '') || coalesce(substr(to_char(t.GOODSCLASSID), 1,255), '') || coalesce(substr(to_char(t.OTCFLAG), 1,255), '') || coalesce(substr(to_char(t.TRADEMARK), 1,255), '') || coalesce(substr(to_char(t.APPROVEDOCNO), 1,255), '') || coalesce(substr(to_char(t.PRODDATE), 1,255), '') || coalesce(substr(to_char(t.QUALIFYDOCNO), 1,255), '') || coalesce(substr(to_char(t.GOODSCLASSNAME), 1,255), '') || coalesce(substr(to_char(t.OLDDTLID), 1,255), '') || coalesce(substr(to_char(t.OTHERID), 1,255), '') || coalesce(substr(to_char(t.EXPFLAG), 1,255), '') || coalesce(substr(to_char(t.EXPDATE), 1,255), '') || coalesce(substr(to_char(t.EXPFILENAME), 1,255), '') || coalesce(substr(to_char(t.INVOICENO), 1,255), '') || coalesce(substr(to_char(t.INVOICELINE), 1,255), '') || coalesce(substr(to_char(t.CANKEEP), 1,255), '') || coalesce(substr(to_char(t.ZXCOLOR), 1,255), '') || coalesce(substr(to_char(t.TPRICETICK), 1,255), '') || coalesce(substr(to_char(t.TPRICEFLAG), 1,255), '') || coalesce(substr(to_char(t.DTLMEMO), 1,255), '') || coalesce(substr(to_char(t.BMSIODTLID), 1,255), '') || coalesce(substr(to_char(t.PACKINGQTY), 1,255), '') || coalesce(substr(to_char(t.PRTORDERSET), 1,255), '') || coalesce(substr(to_char(t.BMSINOUTID), 1,255), '') || coalesce(substr(to_char(t.SORTTYPE), 1,255), '') || coalesce(substr(to_char(t.WAVEGOODSDTLID), 1,255), '') || coalesce(substr(to_char(t.PRTINVFLAG), 1,255), '') || coalesce(substr(to_char(t.INVID), 1,255), '') || coalesce(substr(to_char(t.DTLZXCOLUMN1), 1,255), '') || coalesce(substr(to_char(t.DTLZXCOLUMN2), 1,255), '') || coalesce(substr(to_char(t.DTLZXCOLUMN3), 1,255), '') || coalesce(substr(to_char(t.DTLZXCOLUMN4), 1,255), '') || coalesce(substr(to_char(t.DTLZXCOLUMN5), 1,255), '') || coalesce(substr(to_char(t.PRINTNO), 1,255), '') || coalesce(substr(to_char(t.PRINTLINE), 1,255), '') || coalesce(substr(to_char(t.LOTLIMIT), 1,255), '') || coalesce(substr(to_char(t.PERIODLIMIT), 1,255), '') || coalesce(substr(to_char(t.PERIODLIMITUNIT), 1,255), '') || coalesce(substr(to_char(t.CANCELDATE), 1,255), '') || coalesce(substr(to_char(t.CANCELMANID), 1,255), '') || coalesce(substr(to_char(t.WAITFORCANCEL), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN1), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN2), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN3), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN4), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN5), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN6), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN7), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN8), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN9), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN10), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN11), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN12), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN13), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN14), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN15), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN16), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN17), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN18), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN19), 1,255), '') || coalesce(substr(to_char(t.LYDTLZXCOLUMN20), 1,255), '') || coalesce(substr(to_char(t.INVCODE), 1,255), '') || coalesce(substr(to_char(t.TO_ZSPT), 1,255), '') || coalesce(substr(to_char(t.TO_ZSPTDATE), 1,255), '') || coalesce(substr(to_char(t.FROM_SUDTLID), 1,255), '') || coalesce(substr(to_char(t.TO_GOODSOWNERID), 1,255), '') || coalesce(substr(to_char(t.TO_OWNERGOODSID), 1,255), '') || coalesce(substr(to_char(t.TO_GOODSID), 1,255), '') || coalesce(substr(to_char(t.TO_LOTID), 1,255), '') || coalesce(substr(to_char(t.TO_GOODSPACKID), 1,255), '') || coalesce(substr(to_char(t.TO_USESTATUS), 1,255), '') || coalesce(substr(to_char(t.TO_ERRORMEMO), 1,255), '') || coalesce(substr(to_char(t.SOURCEOUTDTLID), 1,255), '') || coalesce(substr(to_char(t.AUTOTASKFLAG), 1,255), '') || coalesce(substr(to_char(t.AUTOCREDATE), 1,255), '') || coalesce(substr(to_char(t.BUYINGPRICE), 1,255), '') || coalesce(substr(to_char(t.TO_ERPINDTLID), 1,255), '') || coalesce(substr(to_char(t.TO_ERPOUTDTLID), 1,255), '') || coalesce(substr(to_char(t.TO_PRINTPRICE), 1,255), '') || coalesce(substr(to_char(t.TO_PRINTAMT), 1,255), '') || coalesce(substr(to_char(t.INVOADDRESS), 1,255), '') || coalesce(substr(to_char(t.DISCOUNT_FALG), 1,255), '') || coalesce(substr(to_char(t.DISCOUNT_SADTLID), 1,255), '') || coalesce(substr(to_char(t.DISCOUNT_GOODSID), 1,255), '') || coalesce(substr(to_char(t.DISCOUNT_AMT), 1,255), '') || coalesce(substr(to_char(t.DISCOUNT_TAXRATE), 1,255), '') || coalesce(substr(to_char(t.DISCOUNT_DATE), 1,255), '') || coalesce(substr(to_char(t.DISCOUNT_MSG), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.OUTID,t.WAREHID,t.GOODSOWNERID,t.GOODSID,t.OWNERGOODSID,t.BATCHNO,t.LOTID,t.LOTNO,t.VALIDDATE,t.GOODSSTATUSID,t.QUANTITYSTATUS,t.PRICE,t.GOODSQTY,t.GOODSPACKID,t.REALQTY,t.TRADEGOODSQTY,t.TRADEGOODSPACK,t.STOCKQTY,t.CUSTCANCELSTATUS,t.WMSCANCELSTATUS,t.ADDMEDCHECKFLAG,t.SRCEXPDTLNO,t.USESTATUS,t.PRINTFLAG,t.PRINTERROR,t.DISTRIBUTEID,t.DISTRIBUTEDTLID,t.RETAILPRICE,t.AMT,t.ALLOCATETIME,t.FAILREASON,t.EXPDTLMEMO,t.PLACESUPPLYID,t.PLACESUPPLYDTLID,t.PLACEPRICE,t.RESALEPRICE,t.PLACEMONEY,t.GOODSCLASSID,t.OTCFLAG,t.TRADEMARK,t.APPROVEDOCNO,t.PRODDATE,t.QUALIFYDOCNO,t.GOODSCLASSNAME,t.OLDDTLID,t.OTHERID,t.EXPFLAG,t.EXPDATE,t.EXPFILENAME,t.INVOICENO,t.INVOICELINE,t.CANKEEP,t.ZXCOLOR,t.TPRICETICK,t.TPRICEFLAG,t.DTLMEMO,t.BMSIODTLID,t.PACKINGQTY,t.PRTORDERSET,t.BMSINOUTID,t.SORTTYPE,t.WAVEGOODSDTLID,t.PRTINVFLAG,t.INVID,t.DTLZXCOLUMN1,t.DTLZXCOLUMN2,t.DTLZXCOLUMN3,t.DTLZXCOLUMN4,t.DTLZXCOLUMN5,t.PRINTNO,t.PRINTLINE,t.LOTLIMIT,t.PERIODLIMIT,t.PERIODLIMITUNIT,t.CANCELDATE,t.CANCELMANID,t.WAITFORCANCEL,t.LYDTLZXCOLUMN1,t.LYDTLZXCOLUMN2,t.LYDTLZXCOLUMN3,t.LYDTLZXCOLUMN4,t.LYDTLZXCOLUMN5,t.LYDTLZXCOLUMN6,t.LYDTLZXCOLUMN7,t.LYDTLZXCOLUMN8,t.LYDTLZXCOLUMN9,t.LYDTLZXCOLUMN10,t.LYDTLZXCOLUMN11,t.LYDTLZXCOLUMN12,t.LYDTLZXCOLUMN13,t.LYDTLZXCOLUMN14,t.LYDTLZXCOLUMN15,t.LYDTLZXCOLUMN16,t.LYDTLZXCOLUMN17,t.LYDTLZXCOLUMN18,t.LYDTLZXCOLUMN19,t.LYDTLZXCOLUMN20,t.INVCODE,t.TO_ZSPT,t.TO_ZSPTDATE,t.FROM_SUDTLID,t.TO_GOODSOWNERID,t.TO_OWNERGOODSID,t.TO_GOODSID,t.TO_LOTID,t.TO_GOODSPACKID,t.TO_USESTATUS,t.TO_ERRORMEMO,t.SOURCEOUTDTLID,t.AUTOTASKFLAG,t.AUTOCREDATE,t.BUYINGPRICE,t.TO_ERPINDTLID,t.TO_ERPOUTDTLID,t.TO_PRINTPRICE,t.TO_PRINTAMT,t.INVOADDRESS,t.DISCOUNT_FALG,t.DISCOUNT_SADTLID,t.DISCOUNT_GOODSID,t.DISCOUNT_AMT,t.DISCOUNT_TAXRATE,t.DISCOUNT_DATE,t.DISCOUNT_MSG from WMS_OUT_ORDER_DTL t"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_wms"
            table = "${table_name}"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(OUTDTLID,DW_ID)
              DISTRIBUTED BY HASH (OUTDTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }
  - name: WMS_OUT_ORDER_LOT_DTL_d
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lywms"
            password = "lywms"
            table_path = "lywms.WMS_OUT_ORDER_LOT_DTL"
            query = """select t.OUTLOTID, ora_hash(substr(coalesce(substr(to_char(t.OUTDTLID), 1,255), '') || coalesce(substr(to_char(t.OUTLOTID), 1,255), '') || coalesce(substr(to_char(t.LOTID), 1,255), '') || coalesce(substr(to_char(t.GOODSQTY), 1,255), '') || coalesce(substr(to_char(t.WAVEGOODSDTLID), 1,255), '') || coalesce(substr(to_char(t.WHOLEQTY), 1,255), '') || coalesce(substr(to_char(t.BOXNO), 1,255), '') || coalesce(substr(to_char(t.REALQTY), 1,255), '') || coalesce(substr(to_char(t.IWCS_WHOLEQTY), 1,255), '') || coalesce(substr(to_char(t.IWCS_BOXNO), 1,255), '') || coalesce(substr(to_char(t.SOURCEOUTLOTID), 1,255), '') || coalesce(substr(to_char(t.AUTOTASKFLAG), 1,255), '') || coalesce(substr(to_char(t.AUTOCREDATE), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.OUTDTLID,t.LOTID,t.GOODSQTY,t.WAVEGOODSDTLID,t.WHOLEQTY,t.BOXNO,t.REALQTY,t.IWCS_WHOLEQTY,t.IWCS_BOXNO,t.SOURCEOUTLOTID,t.AUTOTASKFLAG,t.AUTOCREDATE,t1.ALLOCATETIME from WMS_OUT_ORDER_LOT_DTL t LEFT JOIN WMS_OUT_ORDER_DTL t1 ON t.OUTDTLID = t1.OUTDTLID"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_wms"
            table = "${table_name}"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(OUTLOTID,DW_ID)
              DISTRIBUTED BY HASH (OUTLOTID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }