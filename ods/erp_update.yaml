workflow:
    name: erp_manual_update
    schedule: 0 0 0 ? * * *
    project: erp_ods
tasks:
  - name: BMS_SA_DOCTOSET_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    deps: []
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.BMS_SA_DOCTOSET"
            query = """select t.SALESDTLID,t.SASETTLEDTLID, ora_hash(substr(coalesce(substr(to_char(t.SALESDTLID), 1,255), '') || coalesce(substr(to_char(t.SASETTLEDTLID), 1,255), '') || coalesce(substr(to_char(t.GOODSQTY), 1,255), '') || coalesce(substr(to_char(t.TOTAL_LINE), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.GOODSQTY,t.TOTAL_LINE,t2.CREDATE as SALES_CREDATE, t4.CREDATE as SETTLE_CREDATE from BMS_SA_DOCTOSET t LEFT JOIN BMS_SA_DTL t1 ON t.SALESDTLID=t1.SALESDTLID LEFT JOIN BMS_SA_DOC t2 ON t1.salesid=t2.salesid LEFT JOIN BMS_SA_SETTLE_DTL t3 ON t.SASETTLEDTLID=t3.SASETTLEDTLID LEFT JOIN BMS_SA_SETTLE_DOC t4 ON t3.SASETTLEID=t4.SASETTLEID WHERE (t2.CREDATE is not NULL AND t2.CREDATE >= TRUNC(SYSDATE-360)) OR  (t4.CREDATE is not NULL AND t4.CREDATE >= TRUNC(SYSDATE-360)) OR (t2.CREDATE is NULL AND t4.CREDATE is NULL)"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(SALESDTLID,SASETTLEDTLID,DW_ID)
              DISTRIBUTED BY HASH (SALESDTLID,SASETTLEDTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: BMS_SA_DOCTOSET_ods_update
    task_type: Sql
    fail_retry_times: 4
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: YES
    deps: [BMS_SA_DOCTOSET_ods_tmp]
    sql: |
        UPDATE bms_sa_doctoset t
        SET t.dw_updatetime = CURRENT_DATE(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM bms_sa_doctoset_doristmp s WHERE s.SALESDTLID = t.SALESDTLID AND s.SASETTLEDTLID = t.SASETTLEDTLID AND s.DW_ID = t.DW_ID) AND ((t.`SALES_CREDATE` is not null AND t.`SALES_CREDATE` > date_sub(CURDATE(), INTERVAL 360 DAY)) OR (t.`SETTLE_CREDATE` is not null AND t.`SETTLE_CREDATE` > date_sub(CURDATE(), INTERVAL 360 DAY)) OR ((t.`SALES_CREDATE` is null) AND (t.`SETTLE_CREDATE` is null)));
        INSERT INTO bms_sa_doctoset (`SALESDTLID`,`SASETTLEDTLID`,`GOODSQTY`,`TOTAL_LINE`,`SALES_CREDATE`,`SETTLE_CREDATE`,`dw_id`,`is_active`,`dw_createtime`,`dw_updatetime`)
        SELECT s.`SALESDTLID`,s.`SASETTLEDTLID`,s.`GOODSQTY`,s.`TOTAL_LINE`,s.`SALES_CREDATE`,s.`SETTLE_CREDATE`,s.`dw_id`,s.`is_active`,s.`dw_createtime`,s.`dw_updatetime`
        FROM bms_sa_doctoset_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM bms_sa_doctoset WHERE s.SALESDTLID = BMS_SA_DOCTOSET.SALESDTLID AND s.SASETTLEDTLID = BMS_SA_DOCTOSET.SASETTLEDTLID AND s.DW_ID = BMS_SA_DOCTOSET.DW_ID AND BMS_SA_DOCTOSET.IS_ACTIVE=1);
        DROP TABLE bms_sa_doctoset_doristmp;

  - name: BMS_SA_SETTOREC_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    deps: [BMS_SA_DOCTOSET_ods_update]
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.BMS_SA_SETTOREC"
            query = """select t.SASETTLEDTLID,t.SARECDTLID, ora_hash(substr(coalesce(substr(to_char(t.SASETTLEDTLID), 1,255), '') || coalesce(substr(to_char(t.SARECDTLID), 1,255), '') || coalesce(substr(to_char(t.GOODSQTY), 1,255), '') || coalesce(substr(to_char(t.TOTAL_LINE), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.GOODSQTY,t.TOTAL_LINE,t2.CREDATE as SETTLE_CREDATE, t4.CREDATE as REC_CREDATE from BMS_SA_SETTOREC t LEFT JOIN BMS_SA_SETTLE_DTL t1 ON t.SASETTLEDTLID=t1.SASETTLEDTLID LEFT JOIN BMS_SA_SETTLE_DOC t2 ON t1.SASETTLEID=t2.SASETTLEID LEFT JOIN BMS_SA_REC_DTL t3 ON t.SARECDTLID=t3.SARECDTLID LEFT JOIN BMS_SA_REC_DOC t4 ON t3.SARECID=t4.SARECID WHERE (t2.CREDATE is not NULL AND t2.CREDATE >= TRUNC(SYSDATE-360)) OR (t4.CREDATE is not NULL AND t4.CREDATE >= TRUNC(SYSDATE-360)) OR (t2.CREDATE is NULL AND t4.CREDATE is NULL)"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(SASETTLEDTLID,SARECDTLID,DW_ID)
              DISTRIBUTED BY HASH (SASETTLEDTLID,SARECDTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: BMS_SA_SETTOREC_ods_update
    task_type: Sql
    fail_retry_times: 4
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: YES
    deps: [BMS_SA_SETTOREC_ods_tmp]
    sql: |
        UPDATE bms_sa_settorec t
        SET t.dw_updatetime = CURRENT_DATE(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM bms_sa_settorec_doristmp s WHERE s.SASETTLEDTLID = t.SASETTLEDTLID AND s.SARECDTLID = t.SARECDTLID AND s.DW_ID = t.DW_ID)  AND ((t.`SETTLE_CREDATE` is not null AND t.`SETTLE_CREDATE` > date_sub(CURDATE(), INTERVAL 360 DAY)) OR (t.`REC_CREDATE` is not null AND t.`REC_CREDATE` > date_sub(CURDATE(), INTERVAL 360 DAY)) OR ((t.`SETTLE_CREDATE` is null) AND (t.`REC_CREDATE` is null)));
        INSERT INTO bms_sa_settorec (`SASETTLEDTLID`,`SARECDTLID`,`GOODSQTY`,`TOTAL_LINE`,`SETTLE_CREDATE`,`REC_CREDATE`,`dw_id`,`is_active`,`dw_createtime`,`dw_updatetime`)
        SELECT s.`SASETTLEDTLID`,s.`SARECDTLID`,s.`GOODSQTY`,s.`TOTAL_LINE`,s.`SETTLE_CREDATE`,s.`REC_CREDATE`,s.`dw_id`,s.`is_active`,s.`dw_createtime`,s.`dw_updatetime`
        FROM bms_sa_settorec_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM bms_sa_settorec WHERE s.SASETTLEDTLID = BMS_SA_SETTOREC.SASETTLEDTLID AND s.SARECDTLID = BMS_SA_SETTOREC.SARECDTLID AND s.DW_ID = BMS_SA_SETTOREC.DW_ID AND BMS_SA_SETTOREC.IS_ACTIVE=1);
        DROP TABLE bms_sa_settorec_doristmp;


  - name: PUB_DDL_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    deps: [BMS_SA_SETTOREC_ods_update]
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.PUB_DDL"
            query = """select t.SYSID, ora_hash(substr(coalesce(substr(to_char(t.SYSID), 1,255), '') || coalesce(substr(to_char(t.KEYWORD), 1,255), '') || coalesce(substr(to_char(t.TABLECOLUMN), 1,255), '') || coalesce(substr(to_char(t.MEMO), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.KEYWORD,t.TABLECOLUMN,t.MEMO from PUB_DDL t"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(SYSID,DW_ID)
              DISTRIBUTED BY HASH (SYSID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: PUB_DDL_ods_update
    task_type: Sql
    fail_retry_times: 1
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: YES
    deps: [PUB_DDL_ods_tmp]
    sql: |
        UPDATE pub_ddl t
        SET t.dw_updatetime = CURRENT_DATE(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM pub_ddl_doristmp s WHERE s.SYSID = t.SYSID AND s.DW_ID = t.DW_ID) ;
        INSERT INTO pub_ddl (`SYSID`,`KEYWORD`,`TABLECOLUMN`,`MEMO`,`dw_id`,`dw_createtime`,`dw_updatetime`,`is_active`)
        SELECT s.`SYSID`,s.`KEYWORD`,s.`TABLECOLUMN`,s.`MEMO`,s.`dw_id`,s.`dw_createtime`,s.`dw_updatetime`,s.`is_active`
        FROM pub_ddl_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM pub_ddl WHERE s.SYSID = PUB_DDL.SYSID AND s.DW_ID = PUB_DDL.DW_ID AND PUB_DDL.IS_ACTIVE=1);
        DROP TABLE pub_ddl_doristmp;

  - name: PUB_DDL_DTL_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    deps: [PUB_DDL_ods_update]
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.PUB_DDL_DTL"
            query = """select t.SYSDTLID, ora_hash(substr(coalesce(substr(to_char(t.SYSID), 1,255), '') || coalesce(substr(to_char(t.SYSDTLID), 1,255), '') || coalesce(substr(to_char(t.DDLID), 1,255), '') || coalesce(substr(to_char(t.DDLNAME), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.SYSID,t.DDLID,t.DDLNAME from PUB_DDL_DTL t"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(SYSDTLID,DW_ID)
              DISTRIBUTED BY HASH (SYSDTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: PUB_DDL_DTL_ods_update
    task_type: Sql
    fail_retry_times: 1
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: YES
    deps: [PUB_DDL_DTL_ods_tmp]
    sql: |
        UPDATE pub_ddl_dtl t
        SET t.dw_updatetime = CURRENT_DATE(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM pub_ddl_dtl_doristmp s WHERE s.SYSDTLID = t.SYSDTLID AND s.DW_ID = t.DW_ID) ;
        INSERT INTO pub_ddl_dtl (`SYSID`,`SYSDTLID`,`DDLID`,`DDLNAME`,`dw_id`,`dw_createtime`,`dw_updatetime`,`is_active`)
        SELECT s.`SYSID`,s.`SYSDTLID`,s.`DDLID`,s.`DDLNAME`,s.`dw_id`,s.`dw_createtime`,s.`dw_updatetime`,s.`is_active`
        FROM pub_ddl_dtl_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM pub_ddl_dtl WHERE s.SYSDTLID = PUB_DDL_DTL.SYSDTLID AND s.DW_ID = PUB_DDL_DTL.DW_ID AND PUB_DDL_DTL.IS_ACTIVE=1);
        DROP TABLE pub_ddl_dtl_doristmp;

  - name: SYS_DDL_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    deps: [PUB_DDL_DTL_ods_update]
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.SYS_DDL"
            query = """select t.SYSID, ora_hash(substr(coalesce(substr(to_char(t.SYSID), 1,255), '') || coalesce(substr(to_char(t.KEYWORD), 1,255), '') || coalesce(substr(to_char(t.TABLECOLUMN), 1,255), '') || coalesce(substr(to_char(t.MEMO), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.KEYWORD,t.TABLECOLUMN,t.MEMO from SYS_DDL t"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(SYSID,DW_ID)
              DISTRIBUTED BY HASH (SYSID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: SYS_DDL_ods_update
    task_type: Sql
    fail_retry_times: 1
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: YES
    deps: [SYS_DDL_ods_tmp]
    sql: |
        UPDATE sys_ddl t
        SET t.dw_updatetime = CURRENT_DATE(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM sys_ddl_doristmp s WHERE s.SYSID = t.SYSID AND s.DW_ID = t.DW_ID) ;
        INSERT INTO sys_ddl (`SYSID`,`KEYWORD`,`TABLECOLUMN`,`MEMO`,`dw_id`,`dw_createtime`,`dw_updatetime`,`is_active`)
        SELECT s.`SYSID`,s.`KEYWORD`,s.`TABLECOLUMN`,s.`MEMO`,s.`dw_id`,s.`dw_createtime`,s.`dw_updatetime`,s.`is_active`
        FROM sys_ddl_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM sys_ddl WHERE s.SYSID = SYS_DDL.SYSID AND s.DW_ID = SYS_DDL.DW_ID AND SYS_DDL.IS_ACTIVE=1);
        DROP TABLE sys_ddl_doristmp;

  - name: SYS_DDL_DTL_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    deps: [SYS_DDL_ods_update]
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.SYS_DDL_DTL"
            query = """select t.SYSDTLID, ora_hash(substr(coalesce(substr(to_char(t.SYSID), 1,255), '') || coalesce(substr(to_char(t.SYSDTLID), 1,255), '') || coalesce(substr(to_char(t.DDLID), 1,255), '') || coalesce(substr(to_char(t.DDLNAME), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.SYSID,t.DDLID,t.DDLNAME from SYS_DDL_DTL t"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(SYSDTLID,DW_ID)
              DISTRIBUTED BY HASH (SYSDTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: SYS_DDL_DTL_ods_update
    task_type: Sql
    fail_retry_times: 1
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: YES
    deps: [SYS_DDL_DTL_ods_tmp]
    sql: |
        UPDATE sys_ddl_dtl t
        SET t.dw_updatetime = CURRENT_DATE(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM sys_ddl_dtl_doristmp s WHERE s.SYSDTLID = t.SYSDTLID AND s.DW_ID = t.DW_ID) ;
        INSERT INTO sys_ddl_dtl (`SYSID`,`SYSDTLID`,`DDLID`,`DDLNAME`,`dw_id`,`dw_createtime`,`dw_updatetime`,`is_active`)
        SELECT s.`SYSID`,s.`SYSDTLID`,s.`DDLID`,s.`DDLNAME`,s.`dw_id`,s.`dw_createtime`,s.`dw_updatetime`,s.`is_active`
        FROM sys_ddl_dtl_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM sys_ddl_dtl WHERE s.SYSDTLID = SYS_DDL_DTL.SYSDTLID AND s.DW_ID = SYS_DDL_DTL.DW_ID AND SYS_DDL_DTL.IS_ACTIVE=1);
        DROP TABLE sys_ddl_dtl_doristmp;

  - name: BMS_MV_DTL_d_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    deps: [SYS_DDL_DTL_ods_update]
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.BMS_MV_DTL"
            query = """select t.MOVEDTLID, ora_hash(substr(coalesce(substr(to_char(t.MOVEDTLID), 1,255), '') || coalesce(substr(to_char(t.MOVEID), 1,255), '') || coalesce(substr(to_char(t.PRINTNO), 1,255), '') || coalesce(substr(to_char(t.PRINTLINE), 1,255), '') || coalesce(substr(to_char(t.GOODSID), 1,255), '') || coalesce(substr(to_char(t.GOODSDTLID), 1,255), '') || coalesce(substr(to_char(t.BATCHID), 1,255), '') || coalesce(substr(to_char(t.LOTID), 1,255), '') || coalesce(substr(to_char(t.POSID), 1,255), '') || coalesce(substr(to_char(t.GOODSSTATUSID), 1,255), '') || coalesce(substr(to_char(t.GOODSQTY), 1,255), '') || coalesce(substr(to_char(t.GOODSUSEUNIT), 1,255), '') || coalesce(substr(to_char(t.GOODSUSEQTY), 1,255), '') || coalesce(substr(to_char(t.COSTINGPRICE), 1,255), '') || coalesce(substr(to_char(t.COSTINGMONEY), 1,255), '') || coalesce(substr(to_char(t.COSTCALCFLAG), 1,255), '') || coalesce(substr(to_char(t.STIFLAG), 1,255), '') || coalesce(substr(to_char(t.STOFLAG), 1,255), '') || coalesce(substr(to_char(t.DTLMEMO), 1,255), '') || coalesce(substr(to_char(t.SKCERTID), 1,255), '') || coalesce(substr(to_char(t.INVALIDFLAG), 1,255), '') || coalesce(substr(to_char(t.INVALIDMANID), 1,255), '') || coalesce(substr(to_char(t.INVALIDTIME), 1,255), '') || coalesce(substr(to_char(t.USESTATUS), 1,255), '') || coalesce(substr(to_char(t.PLACESUPPLYDTLSTID), 1,255), '') || coalesce(substr(to_char(t.CMDID), 1,255), '') || coalesce(substr(to_char(t.CMDMATID), 1,255), '') || coalesce(substr(to_char(t.SENDFLAG), 1,255), '') || coalesce(substr(to_char(t.WMSSTATUS), 1,255), '') || coalesce(substr(to_char(t.ZX_UNITPRICE), 1,255), '') || coalesce(substr(to_char(t.ZX_TOTAL), 1,255), '') || coalesce(substr(to_char(t.SUPPLYTAXRATE), 1,255), '') || coalesce(substr(to_char(t.SALESTAXRATE), 1,255), '') || coalesce(substr(to_char(t.CHECKCONCLUSION), 1,255), '') || coalesce(substr(to_char(t.CHECKMANID), 1,255), '') || coalesce(substr(to_char(t.CHECKDAY), 1,255), '') || coalesce(substr(to_char(t.WMSDESCR), 1,255), '') || coalesce(substr(to_char(t.WMSDATE), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.MOVEID,t.PRINTNO,t.PRINTLINE,t.GOODSID,t.GOODSDTLID,t.BATCHID,t.LOTID,t.POSID,t.GOODSSTATUSID,t.GOODSQTY,t.GOODSUSEUNIT,t.GOODSUSEQTY,t.COSTINGPRICE,t.COSTINGMONEY,t.COSTCALCFLAG,t.STIFLAG,t.STOFLAG,t.DTLMEMO,t.SKCERTID,t.INVALIDFLAG,t.INVALIDMANID,t.INVALIDTIME,t.USESTATUS,t.PLACESUPPLYDTLSTID,t.CMDID,t.CMDMATID,t.SENDFLAG,t.WMSSTATUS,t.ZX_UNITPRICE,t.ZX_TOTAL,t.SUPPLYTAXRATE,t.SALESTAXRATE,t.CHECKCONCLUSION,t.CHECKMANID,t.CHECKDAY,t.WMSDESCR,t.WMSDATE,t1.CREDATE from BMS_MV_DTL t LEFT JOIN BMS_MV_DOC t1 ON t.MOVEID=t1.MOVEID WHERE (t.INVALIDTIME is not NULL AND t.INVALIDTIME >= TRUNC(SYSDATE-60)) OR (t.CHECKDAY is not NULL AND t.CHECKDAY >= TRUNC(SYSDATE-60)) OR (t.WMSDATE is not NULL AND t.WMSDATE >= TRUNC(SYSDATE-60)) OR (t1.CREDATE is not NULL AND t1.CREDATE >= TRUNC(SYSDATE-60)) OR (t.INVALIDTIME is NULL AND t.CHECKDAY is NULL AND t.WMSDATE is NULL AND t1.CREDATE is NULL)"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(MOVEDTLID,DW_ID)
              DISTRIBUTED BY HASH (MOVEDTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: BMS_MV_DTL_d_ods_update
    task_type: Sql
    fail_retry_times: 1
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: YES
    deps: [BMS_MV_DTL_d_ods_tmp]
    sql: |
        UPDATE bms_mv_dtl t
        SET t.dw_updatetime = NOW(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM bms_mv_dtl_doristmp s WHERE s.MOVEDTLID = t.MOVEDTLID AND s.DW_ID = t.DW_ID)  AND ((t.`INVALIDTIME` is not null AND t.`INVALIDTIME` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`CHECKDAY` is not null AND t.`CHECKDAY` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`WMSDATE` is not null AND t.`WMSDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`CREDATE` is not null AND t.`CREDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR ((t.`INVALIDTIME` is null) AND (t.`CHECKDAY` is null) AND (t.`WMSDATE` is null) AND (t.`CREDATE` is null)));
        INSERT INTO bms_mv_dtl (`MOVEDTLID`,`MOVEID`,`PRINTNO`,`PRINTLINE`,`GOODSID`,`GOODSDTLID`,`BATCHID`,`LOTID`,`POSID`,`GOODSSTATUSID`,`GOODSQTY`,`GOODSUSEUNIT`,`GOODSUSEQTY`,`COSTINGPRICE`,`COSTINGMONEY`,`COSTCALCFLAG`,`STIFLAG`,`STOFLAG`,`DTLMEMO`,`SKCERTID`,`INVALIDFLAG`,`INVALIDMANID`,`INVALIDTIME`,`USESTATUS`,`PLACESUPPLYDTLSTID`,`CMDID`,`CMDMATID`,`SENDFLAG`,`WMSSTATUS`,`ZX_UNITPRICE`,`ZX_TOTAL`,`SUPPLYTAXRATE`,`SALESTAXRATE`,`CHECKCONCLUSION`,`CHECKMANID`,`CHECKDAY`,`WMSDESCR`,`WMSDATE`,`CREDATE`,`dw_id`,`dw_createtime`,`dw_updatetime`,`is_active`)
        SELECT s.`MOVEDTLID`,s.`MOVEID`,s.`PRINTNO`,s.`PRINTLINE`,s.`GOODSID`,s.`GOODSDTLID`,s.`BATCHID`,s.`LOTID`,s.`POSID`,s.`GOODSSTATUSID`,s.`GOODSQTY`,s.`GOODSUSEUNIT`,s.`GOODSUSEQTY`,s.`COSTINGPRICE`,s.`COSTINGMONEY`,s.`COSTCALCFLAG`,s.`STIFLAG`,s.`STOFLAG`,s.`DTLMEMO`,s.`SKCERTID`,s.`INVALIDFLAG`,s.`INVALIDMANID`,s.`INVALIDTIME`,s.`USESTATUS`,s.`PLACESUPPLYDTLSTID`,s.`CMDID`,s.`CMDMATID`,s.`SENDFLAG`,s.`WMSSTATUS`,s.`ZX_UNITPRICE`,s.`ZX_TOTAL`,s.`SUPPLYTAXRATE`,s.`SALESTAXRATE`,s.`CHECKCONCLUSION`,s.`CHECKMANID`,s.`CHECKDAY`,s.`WMSDESCR`,s.`WMSDATE`,s.`CREDATE`,s.`dw_id`,s.`dw_createtime`,s.`dw_updatetime`,s.`is_active`
        FROM bms_mv_dtl_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM bms_mv_dtl WHERE s.MOVEDTLID = BMS_MV_DTL.MOVEDTLID AND s.DW_ID = BMS_MV_DTL.DW_ID AND BMS_MV_DTL.IS_ACTIVE=1);
        DROP TABLE bms_mv_dtl_doristmp;
        UPDATE BMS_MV_DTL SET is_active = 0;
        CREATE TABLE IF NOT EXISTS BMS_MV_DTL_latest_records AS
        SELECT 
            MOVEDTLID,
            MAX(dw_createtime) AS dw_createtime
        FROM BMS_MV_DTL
        GROUP BY MOVEDTLID;
        UPDATE BMS_MV_DTL SET is_active = 1
        FROM BMS_MV_DTL_latest_records
        WHERE BMS_MV_DTL.dw_createtime = BMS_MV_DTL_latest_records.dw_createtime AND 
        BMS_MV_DTL.dw_createtime = BMS_MV_DTL.dw_updatetime AND 
            BMS_MV_DTL.MOVEDTLID=BMS_MV_DTL_latest_records.MOVEDTLID;
        DROP TABLE IF EXISTS BMS_MV_DTL_latest_records;


  - name: BMS_SA_CON_DTL_d_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    deps: [BMS_MV_DTL_d_ods_update]
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.BMS_SA_CON_DTL"
            query = """select t.CONDTLID, ora_hash(substr(coalesce(substr(to_char(t.CONID), 1,255), '') || coalesce(substr(to_char(t.CONDTLID), 1,255), '') || coalesce(substr(to_char(t.GOODSID), 1,255), '') || coalesce(substr(to_char(t.GOODSDTLID), 1,255), '') || coalesce(substr(to_char(t.PRICEID), 1,255), '') || coalesce(substr(to_char(t.GOODSQTY), 1,255), '') || coalesce(substr(to_char(t.GOODSUSEUNIT), 1,255), '') || coalesce(substr(to_char(t.GOODSUSEQTY), 1,255), '') || coalesce(substr(to_char(t.UNITPRICE), 1,255), '') || coalesce(substr(to_char(t.TOTAL_LINE), 1,255), '') || coalesce(substr(to_char(t.WHOLESALEPRICE), 1,255), '') || coalesce(substr(to_char(t.RESALEPRICE), 1,255), '') || coalesce(substr(to_char(t.DISCOUNT), 1,255), '') || coalesce(substr(to_char(t.TIMEPRICEID), 1,255), '') || coalesce(substr(to_char(t.TIMEPRICE), 1,255), '') || coalesce(substr(to_char(t.ACCSTQTY), 1,255), '') || coalesce(substr(to_char(t.DTLMEMO), 1,255), '') || coalesce(substr(to_char(t.INVALIDFLAG), 1,255), '') || coalesce(substr(to_char(t.INVALIDMANID), 1,255), '') || coalesce(substr(to_char(t.INVALIDTIME), 1,255), '') || coalesce(substr(to_char(t.SPECIALLOTFLAG), 1,255), '') || coalesce(substr(to_char(t.LOTMEMO), 1,255), '') || coalesce(substr(to_char(t.PRINTNO), 1,255), '') || coalesce(substr(to_char(t.PRINTLINE), 1,255), '') || coalesce(substr(to_char(t.LOWERFLAG), 1,255), '') || coalesce(substr(to_char(t.SAPLACEQTY), 1,255), '') || coalesce(substr(to_char(t.CUSTOMLASTPRICE), 1,255), '') || coalesce(substr(to_char(t.USESTATUS), 1,255), '') || coalesce(substr(to_char(t.USEPACKSIZE), 1,255), '') || coalesce(substr(to_char(t.REQPRINTQUFLAG), 1,255), '') || coalesce(substr(to_char(t.AGREEMENTFLAG), 1,255), '') || coalesce(substr(to_char(t.AGRCONDTLID), 1,255), '') || coalesce(substr(to_char(t.OLDUNITPRICE), 1,255), '') || coalesce(substr(to_char(t.SUCONDTLID), 1,255), '') || coalesce(substr(to_char(t.INVPRICE), 1,255), '') || coalesce(substr(to_char(t.ECONDTLID), 1,255), '') || coalesce(substr(to_char(t.DISCPRC), 1,255), '') || coalesce(substr(to_char(t.DISCAMOUNT), 1,255), '') || coalesce(substr(to_char(t.YSB_DJ_SN), 1,255), '') || coalesce(substr(to_char(t.STORAGEID), 1,255), '') || coalesce(substr(to_char(t.LOTID), 1,255), '') || coalesce(substr(to_char(t.BATCHID), 1,255), '') || coalesce(substr(to_char(t.ONLINE_ORDER_DTLID), 1,255), '') || coalesce(substr(to_char(t.ZX_YSDBFLAG), 1,255), '') || coalesce(substr(to_char(t.ZX_YY_DLBS), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.CONID,t.GOODSID,t.GOODSDTLID,t.PRICEID,t.GOODSQTY,t.GOODSUSEUNIT,t.GOODSUSEQTY,t.UNITPRICE,t.TOTAL_LINE,t.WHOLESALEPRICE,t.RESALEPRICE,t.DISCOUNT,t.TIMEPRICEID,t.TIMEPRICE,t.ACCSTQTY,t.DTLMEMO,t.INVALIDFLAG,t.INVALIDMANID,t.INVALIDTIME,t.SPECIALLOTFLAG,t.LOTMEMO,t.PRINTNO,t.PRINTLINE,t.LOWERFLAG,t.SAPLACEQTY,t.CUSTOMLASTPRICE,t.USESTATUS,t.USEPACKSIZE,t.REQPRINTQUFLAG,t.AGREEMENTFLAG,t.AGRCONDTLID,t.OLDUNITPRICE,t.SUCONDTLID,t.INVPRICE,t.ECONDTLID,t.DISCPRC,t.DISCAMOUNT,t.YSB_DJ_SN,t.STORAGEID,t.LOTID,t.BATCHID,t.ONLINE_ORDER_DTLID,t.ZX_YSDBFLAG,t.ZX_YY_DLBS,t1.CREDATE from BMS_SA_CON_DTL t LEFT JOIN BMS_SA_CON_DOC t1 ON t.CONID=t1.CONID WHERE (t.INVALIDTIME is not NULL AND t.INVALIDTIME >= TRUNC(SYSDATE-60)) OR (t1.CREDATE is not NULL AND t1.CREDATE >= TRUNC(SYSDATE-60)) OR (t.INVALIDTIME is NULL AND t1.CREDATE is NULL)"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(CONDTLID,DW_ID)
              DISTRIBUTED BY HASH (CONDTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: BMS_SA_CON_DTL_d_ods_update
    task_type: Sql
    fail_retry_times: 1
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: YES
    deps: [BMS_SA_CON_DTL_d_ods_tmp]
    sql: |
        UPDATE bms_sa_con_dtl t
        SET t.dw_updatetime = NOW(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM bms_sa_con_dtl_doristmp s WHERE s.CONDTLID = t.CONDTLID AND s.DW_ID = t.DW_ID)  AND ((t.`INVALIDTIME` is not null AND t.`INVALIDTIME` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`CREDATE` is not null AND t.`CREDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR ((t.`INVALIDTIME` is null) AND (t.`CREDATE` is null)));
        INSERT INTO bms_sa_con_dtl (`CONID`,`CONDTLID`,`GOODSID`,`GOODSDTLID`,`PRICEID`,`GOODSQTY`,`GOODSUSEUNIT`,`GOODSUSEQTY`,`UNITPRICE`,`TOTAL_LINE`,`WHOLESALEPRICE`,`RESALEPRICE`,`DISCOUNT`,`TIMEPRICEID`,`TIMEPRICE`,`ACCSTQTY`,`DTLMEMO`,`INVALIDFLAG`,`INVALIDMANID`,`INVALIDTIME`,`SPECIALLOTFLAG`,`LOTMEMO`,`PRINTNO`,`PRINTLINE`,`LOWERFLAG`,`SAPLACEQTY`,`CUSTOMLASTPRICE`,`USESTATUS`,`USEPACKSIZE`,`REQPRINTQUFLAG`,`AGREEMENTFLAG`,`AGRCONDTLID`,`OLDUNITPRICE`,`SUCONDTLID`,`INVPRICE`,`ECONDTLID`,`DISCPRC`,`DISCAMOUNT`,`YSB_DJ_SN`,`STORAGEID`,`LOTID`,`BATCHID`,`ONLINE_ORDER_DTLID`,`ZX_YSDBFLAG`,`ZX_YY_DLBS`,`CREDATE`,`dw_id`,`dw_createtime`,`dw_updatetime`,`is_active`)
        SELECT s.`CONID`,s.`CONDTLID`,s.`GOODSID`,s.`GOODSDTLID`,s.`PRICEID`,s.`GOODSQTY`,s.`GOODSUSEUNIT`,s.`GOODSUSEQTY`,s.`UNITPRICE`,s.`TOTAL_LINE`,s.`WHOLESALEPRICE`,s.`RESALEPRICE`,s.`DISCOUNT`,s.`TIMEPRICEID`,s.`TIMEPRICE`,s.`ACCSTQTY`,s.`DTLMEMO`,s.`INVALIDFLAG`,s.`INVALIDMANID`,s.`INVALIDTIME`,s.`SPECIALLOTFLAG`,s.`LOTMEMO`,s.`PRINTNO`,s.`PRINTLINE`,s.`LOWERFLAG`,s.`SAPLACEQTY`,s.`CUSTOMLASTPRICE`,s.`USESTATUS`,s.`USEPACKSIZE`,s.`REQPRINTQUFLAG`,s.`AGREEMENTFLAG`,s.`AGRCONDTLID`,s.`OLDUNITPRICE`,s.`SUCONDTLID`,s.`INVPRICE`,s.`ECONDTLID`,s.`DISCPRC`,s.`DISCAMOUNT`,s.`YSB_DJ_SN`,s.`STORAGEID`,s.`LOTID`,s.`BATCHID`,s.`ONLINE_ORDER_DTLID`,s.`ZX_YSDBFLAG`,s.`ZX_YY_DLBS`,s.`CREDATE`,s.`dw_id`,s.`dw_createtime`,s.`dw_updatetime`,s.`is_active`
        FROM bms_sa_con_dtl_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM bms_sa_con_dtl WHERE s.CONDTLID = BMS_SA_CON_DTL.CONDTLID AND s.DW_ID = BMS_SA_CON_DTL.DW_ID AND BMS_SA_CON_DTL.IS_ACTIVE=1);
        DROP TABLE bms_sa_con_dtl_doristmp;
        UPDATE BMS_SA_CON_DTL SET is_active = 0;
        CREATE TABLE IF NOT EXISTS BMS_SA_CON_DTL_latest_records AS
        SELECT 
            CONDTLID,
            MAX(dw_createtime) AS dw_createtime
        FROM BMS_SA_CON_DTL
        GROUP BY CONDTLID;
        UPDATE BMS_SA_CON_DTL SET is_active = 1
        FROM BMS_SA_CON_DTL_latest_records
        WHERE BMS_SA_CON_DTL.dw_createtime = BMS_SA_CON_DTL_latest_records.dw_createtime AND 
        BMS_SA_CON_DTL.dw_createtime = BMS_SA_CON_DTL.dw_updatetime AND 
            BMS_SA_CON_DTL.CONDTLID=BMS_SA_CON_DTL_latest_records.CONDTLID;
        DROP TABLE IF EXISTS BMS_SA_CON_DTL_latest_records;

  - name: BMS_SA_REC_DTL_d_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    deps: [BMS_SA_CON_DTL_d_ods_update]
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.BMS_SA_REC_DTL"
            query = """select t.SARECDTLID, ora_hash(substr(coalesce(substr(to_char(t.SARECID), 1,255), '') || coalesce(substr(to_char(t.SARECDTLID), 1,255), '') || coalesce(substr(to_char(t.GOODSID), 1,255), '') || coalesce(substr(to_char(t.GOODSQTY), 1,255), '') || coalesce(substr(to_char(t.UNITPRICE), 1,255), '') || coalesce(substr(to_char(t.TOTAL_LINE), 1,255), '') || coalesce(substr(to_char(t.SALERID), 1,255), '') || coalesce(substr(to_char(t.SALESDEPTID), 1,255), '') || coalesce(substr(to_char(t.DTLMEMO), 1,255), '') || coalesce(substr(to_char(t.CERTID), 1,255), '') || coalesce(substr(to_char(t.CDATE), 1,255), '') || coalesce(substr(to_char(t.RECSALERID), 1,255), '') || coalesce(substr(to_char(t.RECSALESDEPTID), 1,255), '') || coalesce(substr(to_char(t.EXCHANGE), 1,255), '') || coalesce(substr(to_char(t.INVALIDFLAG), 1,255), '') || coalesce(substr(to_char(t.INVALIDMANID), 1,255), '') || coalesce(substr(to_char(t.INVALIDTIME), 1,255), '') || coalesce(substr(to_char(t.PRINTNO), 1,255), '') || coalesce(substr(to_char(t.PRINTLINE), 1,255), '') || coalesce(substr(to_char(t.CORRECTFLAG), 1,255), '') || coalesce(substr(to_char(t.HIDDENFLAG), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.SARECID,t.GOODSID,t.GOODSQTY,t.UNITPRICE,t.TOTAL_LINE,t.SALERID,t.SALESDEPTID,t.DTLMEMO,t.CERTID,t.CDATE,t.RECSALERID,t.RECSALESDEPTID,t.EXCHANGE,t.INVALIDFLAG,t.INVALIDMANID,t.INVALIDTIME,t.PRINTNO,t.PRINTLINE,t.CORRECTFLAG,t.HIDDENFLAG,t1.CREDATE from BMS_SA_REC_DTL t LEFT JOIN BMS_SA_REC_DOC t1 ON t.SARECID=t1.SARECID WHERE (t.CDATE is not NULL AND t.CDATE >= TRUNC(SYSDATE-60)) OR (t.INVALIDTIME is not NULL AND t.INVALIDTIME >= TRUNC(SYSDATE-60)) OR (t1.CREDATE is not NULL AND t1.CREDATE >= TRUNC(SYSDATE-60)) OR (t.CDATE is NULL AND t.INVALIDTIME is NULL AND t1.CREDATE is NULL)"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(SARECDTLID,DW_ID)
              DISTRIBUTED BY HASH (SARECDTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: BMS_SA_REC_DTL_d_ods_update
    task_type: Sql
    fail_retry_times: 1
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: YES
    deps: [BMS_SA_REC_DTL_d_ods_tmp]
    sql: |
        UPDATE bms_sa_rec_dtl t
        SET t.dw_updatetime = NOW(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM bms_sa_rec_dtl_doristmp s WHERE s.SARECDTLID = t.SARECDTLID AND s.DW_ID = t.DW_ID)  AND ((t.`CDATE` is not null AND t.`CDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`INVALIDTIME` is not null AND t.`INVALIDTIME` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`CREDATE` is not null AND t.`CREDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR ((t.`CDATE` is null) AND (t.`INVALIDTIME` is null) AND (t.`CREDATE` is null)));
        INSERT INTO bms_sa_rec_dtl (`SARECID`,`SARECDTLID`,`GOODSID`,`GOODSQTY`,`UNITPRICE`,`TOTAL_LINE`,`SALERID`,`SALESDEPTID`,`DTLMEMO`,`CERTID`,`CDATE`,`RECSALERID`,`RECSALESDEPTID`,`EXCHANGE`,`INVALIDFLAG`,`INVALIDMANID`,`INVALIDTIME`,`PRINTNO`,`PRINTLINE`,`CORRECTFLAG`,`HIDDENFLAG`,`CREDATE`,`dw_id`,`dw_createtime`,`dw_updatetime`,`is_active`)
        SELECT s.`SARECID`,s.`SARECDTLID`,s.`GOODSID`,s.`GOODSQTY`,s.`UNITPRICE`,s.`TOTAL_LINE`,s.`SALERID`,s.`SALESDEPTID`,s.`DTLMEMO`,s.`CERTID`,s.`CDATE`,s.`RECSALERID`,s.`RECSALESDEPTID`,s.`EXCHANGE`,s.`INVALIDFLAG`,s.`INVALIDMANID`,s.`INVALIDTIME`,s.`PRINTNO`,s.`PRINTLINE`,s.`CORRECTFLAG`,s.`HIDDENFLAG`,s.`CREDATE`,s.`dw_id`,s.`dw_createtime`,s.`dw_updatetime`,s.`is_active`
        FROM bms_sa_rec_dtl_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM bms_sa_rec_dtl WHERE s.SARECDTLID = BMS_SA_REC_DTL.SARECDTLID AND s.DW_ID = BMS_SA_REC_DTL.DW_ID AND BMS_SA_REC_DTL.IS_ACTIVE=1);
        DROP TABLE bms_sa_rec_dtl_doristmp;
        UPDATE BMS_SA_REC_DTL SET is_active = 0;
        CREATE TABLE IF NOT EXISTS BMS_SA_REC_DTL_latest_records AS
        SELECT 
            SARECDTLID,
            MAX(dw_createtime) AS dw_createtime
        FROM BMS_SA_REC_DTL
        GROUP BY SARECDTLID;
        UPDATE BMS_SA_REC_DTL SET is_active = 1
        FROM BMS_SA_REC_DTL_latest_records
        WHERE BMS_SA_REC_DTL.dw_createtime = BMS_SA_REC_DTL_latest_records.dw_createtime AND 
        BMS_SA_REC_DTL.dw_createtime = BMS_SA_REC_DTL.dw_updatetime AND 
            BMS_SA_REC_DTL.SARECDTLID=BMS_SA_REC_DTL_latest_records.SARECDTLID;
        DROP TABLE IF EXISTS BMS_SA_REC_DTL_latest_records;


  - name: GRESA_SA_DTL_d_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: NO
    deps: [BMS_SA_REC_DTL_d_ods_update]
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.GRESA_SA_DTL"
            query = """select t.RSADTLID, ora_hash(substr(coalesce(substr(to_char(t.RSADTLID), 1,255), '') || coalesce(substr(to_char(t.RSAID), 1,255), '') || coalesce(substr(to_char(t.PLACEPOINTID), 1,255), '') || coalesce(substr(to_char(t.COUNTERID), 1,255), '') || coalesce(substr(to_char(t.CLERKERID), 1,255), '') || coalesce(substr(to_char(t.GOODSID), 1,255), '') || coalesce(substr(to_char(t.TAXRATE), 1,255), '') || coalesce(substr(to_char(t.PRICEID), 1,255), '') || coalesce(substr(to_char(t.UNITPRICE), 1,255), '') || coalesce(substr(to_char(t.TOTAL_LINE), 1,255), '') || coalesce(substr(to_char(t.USEPRICE), 1,255), '') || coalesce(substr(to_char(t.REALMONEY), 1,255), '') || coalesce(substr(to_char(t.RESAPRICE), 1,255), '') || coalesce(substr(to_char(t.GOODSQTY), 1,255), '') || coalesce(substr(to_char(t.GOODSUNIT), 1,255), '') || coalesce(substr(to_char(t.PRESCRIBEFLAG), 1,255), '') || coalesce(substr(to_char(t.PRESCRIPTIONDTLID), 1,255), '') || coalesce(substr(to_char(t.COMBINESOURCEID), 1,255), '') || coalesce(substr(to_char(t.PRESENTFLAG), 1,255), '') || coalesce(substr(to_char(t.BREAKSALES), 1,255), '') || coalesce(substr(to_char(t.ORRSADTLID), 1,255), '') || coalesce(substr(to_char(t.USESTATUS), 1,255), '') || coalesce(substr(to_char(t.STORAGEID), 1,255), '') || coalesce(substr(to_char(t.GOODSDTLID), 1,255), '') || coalesce(substr(to_char(t.BATCHID), 1,255), '') || coalesce(substr(to_char(t.POSID), 1,255), '') || coalesce(substr(to_char(t.LOTID), 1,255), '') || coalesce(substr(to_char(t.GOODSSTATUSID), 1,255), '') || coalesce(substr(to_char(t.MANUALRATE), 1,255), '') || coalesce(substr(to_char(t.MANUALMONEY), 1,255), '') || coalesce(substr(to_char(t.MANUALPREMONEY), 1,255), '') || coalesce(substr(to_char(t.MARKETRATE), 1,255), '') || coalesce(substr(to_char(t.MARKETMONEY), 1,255), '') || coalesce(substr(to_char(t.MARKETPREMONEY), 1,255), '') || coalesce(substr(to_char(t.MAINMANUALMONEY), 1,255), '') || coalesce(substr(to_char(t.MAINMANUALPREMONEY), 1,255), '') || coalesce(substr(to_char(t.MAINMARKETMONEY), 1,255), '') || coalesce(substr(to_char(t.MAINMARKETPREMONEY), 1,255), '') || coalesce(substr(to_char(t.PARENTRSADTLID), 1,255), '') || coalesce(substr(to_char(t.SHOPPEFLAG), 1,255), '') || coalesce(substr(to_char(t.COMBINEGOODSQTY), 1,255), '') || coalesce(substr(to_char(t.REDUCEDPRICE), 1,255), '') || coalesce(substr(to_char(t.REDUCEDMONEY), 1,255), '') || coalesce(substr(to_char(t.COMBPREMONEY), 1,255), '') || coalesce(substr(to_char(t.COMBPRICE), 1,255), '') || coalesce(substr(to_char(t.RECIPEFLAG), 1,255), '') || coalesce(substr(to_char(t.RECIPENO), 1,255), '') || coalesce(substr(to_char(t.RECIPTDATE), 1,255), '') || coalesce(substr(to_char(t.RECIPEHOSPITAL), 1,255), '') || coalesce(substr(to_char(t.RECIPEDOCTOR), 1,255), '') || coalesce(substr(to_char(t.SKCERTID), 1,255), '') || coalesce(substr(to_char(t.MEMO), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN1), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN2), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN3), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN4), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN5), 1,255), '') || coalesce(substr(to_char(t.COSTINGPRICE), 1,255), '') || coalesce(substr(to_char(t.COSTINGMONEY), 1,255), '') || coalesce(substr(to_char(t.NOPROMFLAG), 1,255), '') || coalesce(substr(to_char(t.GROUPREQDTLID), 1,255), '') || coalesce(substr(to_char(t.MAININTEGPREMONEY), 1,255), '') || coalesce(substr(to_char(t.MAINVOUCHPREMONEY), 1,255), '') || coalesce(substr(to_char(t.INSPOINTSFLAG), 1,255), '') || coalesce(substr(to_char(t.INSDISCFLAG), 1,255), '') || coalesce(substr(to_char(t.NOUSEVOUFLAG), 1,255), '') || coalesce(substr(to_char(t.ISLIMIT), 1,255), '') || coalesce(substr(to_char(t.DTLINTEGRAL), 1,255), '') || coalesce(substr(to_char(t.EXAMPRICE), 1,255), '') || coalesce(substr(to_char(t.ACCFLAG), 1,255), '') || coalesce(substr(to_char(t.ECODES), 1,255), '') || coalesce(substr(to_char(t.PEIFANGMANID), 1,255), '') || coalesce(substr(to_char(t.SHENFANGMANID), 1,255), '') || coalesce(substr(to_char(t.IGNOREMONEY), 1,255), '') || coalesce(substr(to_char(t.POLICYNO), 1,255), '') || coalesce(substr(to_char(t.ISPOLICY), 1,255), '') || coalesce(substr(to_char(t.POLICYNAME), 1,255), '') || coalesce(substr(to_char(t.INVOICEITEM), 1,255), '') || coalesce(substr(to_char(t.ISPRECIOUS), 1,255), '') || coalesce(substr(to_char(t.GETMONEYLEVEL), 1,255), '') || coalesce(substr(to_char(t.DISCOUNTRATE), 1,255), '') || coalesce(substr(to_char(t.DISCOUNTUPLIMIT), 1,255), '') || coalesce(substr(to_char(t.CUSTOMNAME), 1,255), '') || coalesce(substr(to_char(t.IDCARD), 1,255), '') || coalesce(substr(to_char(t.TELEPHONE), 1,255), '') || coalesce(substr(to_char(t.SPLITMANID), 1,255), '') || coalesce(substr(to_char(t.CHECKMANID), 1,255), '') || coalesce(substr(to_char(t.SPLITDATE), 1,255), '') || coalesce(substr(to_char(t.FUHEMANID), 1,255), '') || coalesce(substr(to_char(t.BREAKGOODSQTY), 1,255), '') || coalesce(substr(to_char(t.BREAKGOODSUNIT), 1,255), '') || coalesce(substr(to_char(t.BREAKPRICE), 1,255), '') || coalesce(substr(to_char(t.GENFACSINGLEREBFLAG), 1,255), '') || coalesce(substr(to_char(t.GENSUPSINGLEREBFLAG), 1,255), '') || coalesce(substr(to_char(t.GENFACTOTALREBFLAG), 1,255), '') || coalesce(substr(to_char(t.GENSUPTOTALREBFLAG), 1,255), '') || coalesce(substr(to_char(t.INSERTMONEY), 1,255), '') || coalesce(substr(to_char(t.ZX_OLDGOODSQTY), 1,255), '') || coalesce(substr(to_char(t.INVDATE), 1,255), '') || coalesce(substr(to_char(t.INVNO), 1,255), '') || coalesce(substr(to_char(t.INVOICEFLAG), 1,255), '') || coalesce(substr(to_char(t.INVCODE), 1,255), '') || coalesce(substr(to_char(t.INVCUSTOMNAME), 1,255), '') || coalesce(substr(to_char(t.ORDERDTLID), 1,255), '') || coalesce(substr(to_char(t.ISCODEFLAG), 1,255), '') || coalesce(substr(to_char(t.ZX_TOGBYBDATE), 1,255), '') || coalesce(substr(to_char(t.ZX_TOGBYBFLAG), 1,255), '') || coalesce(substr(to_char(t.INVOADDRESS), 1,255), '') || coalesce(substr(to_char(t.ZX_SCANTRACECODE_FLAG), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.RSAID,t.PLACEPOINTID,t.COUNTERID,t.CLERKERID,t.GOODSID,t.TAXRATE,t.PRICEID,t.UNITPRICE,t.TOTAL_LINE,t.USEPRICE,t.REALMONEY,t.RESAPRICE,t.GOODSQTY,t.GOODSUNIT,t.PRESCRIBEFLAG,t.PRESCRIPTIONDTLID,t.COMBINESOURCEID,t.PRESENTFLAG,t.BREAKSALES,t.ORRSADTLID,t.USESTATUS,t.STORAGEID,t.GOODSDTLID,t.BATCHID,t.POSID,t.LOTID,t.GOODSSTATUSID,t.MANUALRATE,t.MANUALMONEY,t.MANUALPREMONEY,t.MARKETRATE,t.MARKETMONEY,t.MARKETPREMONEY,t.MAINMANUALMONEY,t.MAINMANUALPREMONEY,t.MAINMARKETMONEY,t.MAINMARKETPREMONEY,t.PARENTRSADTLID,t.SHOPPEFLAG,t.COMBINEGOODSQTY,t.REDUCEDPRICE,t.REDUCEDMONEY,t.COMBPREMONEY,t.COMBPRICE,t.RECIPEFLAG,t.RECIPENO,t.RECIPTDATE,t.RECIPEHOSPITAL,t.RECIPEDOCTOR,t.SKCERTID,t.MEMO,t.ZXCOLUMN1,t.ZXCOLUMN2,t.ZXCOLUMN3,t.ZXCOLUMN4,t.ZXCOLUMN5,t.COSTINGPRICE,t.COSTINGMONEY,t.NOPROMFLAG,t.GROUPREQDTLID,t.MAININTEGPREMONEY,t.MAINVOUCHPREMONEY,t.INSPOINTSFLAG,t.INSDISCFLAG,t.NOUSEVOUFLAG,t.ISLIMIT,t.DTLINTEGRAL,t.EXAMPRICE,t.ACCFLAG,t.ECODES,t.PEIFANGMANID,t.SHENFANGMANID,t.IGNOREMONEY,t.POLICYNO,t.ISPOLICY,t.POLICYNAME,t.INVOICEITEM,t.ISPRECIOUS,t.GETMONEYLEVEL,t.DISCOUNTRATE,t.DISCOUNTUPLIMIT,t.CUSTOMNAME,t.IDCARD,t.TELEPHONE,t.SPLITMANID,t.CHECKMANID,t.SPLITDATE,t.FUHEMANID,t.BREAKGOODSQTY,t.BREAKGOODSUNIT,t.BREAKPRICE,t.GENFACSINGLEREBFLAG,t.GENSUPSINGLEREBFLAG,t.GENFACTOTALREBFLAG,t.GENSUPTOTALREBFLAG,t.INSERTMONEY,t.ZX_OLDGOODSQTY,t.INVDATE,t.INVNO,t.INVOICEFLAG,t.INVCODE,t.INVCUSTOMNAME,t.ORDERDTLID,t.ISCODEFLAG,t.ZX_TOGBYBDATE,t.ZX_TOGBYBFLAG,t.INVOADDRESS,t.ZX_SCANTRACECODE_FLAG,t1.CREDATE from GRESA_SA_DTL t LEFT JOIN GRESA_SA_DOC t1 ON t.RSAID=t1.RSAID WHERE (t.RECIPTDATE is not NULL AND t.RECIPTDATE >= TRUNC(SYSDATE-60)) OR (t.SPLITDATE is not NULL AND t.SPLITDATE >= TRUNC(SYSDATE-60)) OR (t.INVDATE is not NULL AND t.INVDATE >= TRUNC(SYSDATE-60)) OR (t.ZX_TOGBYBDATE is not NULL AND t.ZX_TOGBYBDATE >= TRUNC(SYSDATE-60)) OR (t1.CREDATE is not NULL AND t1.CREDATE >= TRUNC(SYSDATE-60)) OR (t.RECIPTDATE is NULL AND t.SPLITDATE is NULL AND t.INVDATE is NULL AND t.ZX_TOGBYBDATE is NULL AND t1.CREDATE is NULL)"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(RSADTLID,DW_ID)
              DISTRIBUTED BY HASH (RSADTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: GRESA_SA_DTL_d_ods_update
    task_type: Sql
    fail_retry_times: 1
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: NO
    deps: [GRESA_SA_DTL_d_ods_tmp]
    sql: |
        UPDATE gresa_sa_dtl t
        SET t.dw_updatetime = NOW(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM gresa_sa_dtl_doristmp s WHERE s.RSADTLID = t.RSADTLID AND s.DW_ID = t.DW_ID)  AND ((t.`RECIPTDATE` is not null AND t.`RECIPTDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`SPLITDATE` is not null AND t.`SPLITDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`INVDATE` is not null AND t.`INVDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`ZX_TOGBYBDATE` is not null AND t.`ZX_TOGBYBDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`CREDATE` is not null AND t.`CREDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR ((t.`RECIPTDATE` is null) AND (t.`SPLITDATE` is null) AND (t.`INVDATE` is null) AND (t.`ZX_TOGBYBDATE` is null) AND (t.`CREDATE` is null)));
        INSERT INTO gresa_sa_dtl (`RSADTLID`,`RSAID`,`PLACEPOINTID`,`COUNTERID`,`CLERKERID`,`GOODSID`,`TAXRATE`,`PRICEID`,`UNITPRICE`,`TOTAL_LINE`,`USEPRICE`,`REALMONEY`,`RESAPRICE`,`GOODSQTY`,`GOODSUNIT`,`PRESCRIBEFLAG`,`PRESCRIPTIONDTLID`,`COMBINESOURCEID`,`PRESENTFLAG`,`BREAKSALES`,`ORRSADTLID`,`USESTATUS`,`STORAGEID`,`GOODSDTLID`,`BATCHID`,`POSID`,`LOTID`,`GOODSSTATUSID`,`MANUALRATE`,`MANUALMONEY`,`MANUALPREMONEY`,`MARKETRATE`,`MARKETMONEY`,`MARKETPREMONEY`,`MAINMANUALMONEY`,`MAINMANUALPREMONEY`,`MAINMARKETMONEY`,`MAINMARKETPREMONEY`,`PARENTRSADTLID`,`SHOPPEFLAG`,`COMBINEGOODSQTY`,`REDUCEDPRICE`,`REDUCEDMONEY`,`COMBPREMONEY`,`COMBPRICE`,`RECIPEFLAG`,`RECIPENO`,`RECIPTDATE`,`RECIPEHOSPITAL`,`RECIPEDOCTOR`,`SKCERTID`,`MEMO`,`ZXCOLUMN1`,`ZXCOLUMN2`,`ZXCOLUMN3`,`ZXCOLUMN4`,`ZXCOLUMN5`,`COSTINGPRICE`,`COSTINGMONEY`,`NOPROMFLAG`,`GROUPREQDTLID`,`MAININTEGPREMONEY`,`MAINVOUCHPREMONEY`,`INSPOINTSFLAG`,`INSDISCFLAG`,`NOUSEVOUFLAG`,`ISLIMIT`,`DTLINTEGRAL`,`EXAMPRICE`,`ACCFLAG`,`ECODES`,`PEIFANGMANID`,`SHENFANGMANID`,`IGNOREMONEY`,`POLICYNO`,`ISPOLICY`,`POLICYNAME`,`INVOICEITEM`,`ISPRECIOUS`,`GETMONEYLEVEL`,`DISCOUNTRATE`,`DISCOUNTUPLIMIT`,`CUSTOMNAME`,`IDCARD`,`TELEPHONE`,`SPLITMANID`,`CHECKMANID`,`SPLITDATE`,`FUHEMANID`,`BREAKGOODSQTY`,`BREAKGOODSUNIT`,`BREAKPRICE`,`GENFACSINGLEREBFLAG`,`GENSUPSINGLEREBFLAG`,`GENFACTOTALREBFLAG`,`GENSUPTOTALREBFLAG`,`INSERTMONEY`,`ZX_OLDGOODSQTY`,`INVDATE`,`INVNO`,`INVOICEFLAG`,`INVCODE`,`INVCUSTOMNAME`,`ORDERDTLID`,`ISCODEFLAG`,`ZX_TOGBYBDATE`,`ZX_TOGBYBFLAG`,`INVOADDRESS`,`ZX_SCANTRACECODE_FLAG`,`CREDATE`,`dw_id`,`dw_createtime`,`dw_updatetime`,`is_active`)
        SELECT s.`RSADTLID`,s.`RSAID`,s.`PLACEPOINTID`,s.`COUNTERID`,s.`CLERKERID`,s.`GOODSID`,s.`TAXRATE`,s.`PRICEID`,s.`UNITPRICE`,s.`TOTAL_LINE`,s.`USEPRICE`,s.`REALMONEY`,s.`RESAPRICE`,s.`GOODSQTY`,s.`GOODSUNIT`,s.`PRESCRIBEFLAG`,s.`PRESCRIPTIONDTLID`,s.`COMBINESOURCEID`,s.`PRESENTFLAG`,s.`BREAKSALES`,s.`ORRSADTLID`,s.`USESTATUS`,s.`STORAGEID`,s.`GOODSDTLID`,s.`BATCHID`,s.`POSID`,s.`LOTID`,s.`GOODSSTATUSID`,s.`MANUALRATE`,s.`MANUALMONEY`,s.`MANUALPREMONEY`,s.`MARKETRATE`,s.`MARKETMONEY`,s.`MARKETPREMONEY`,s.`MAINMANUALMONEY`,s.`MAINMANUALPREMONEY`,s.`MAINMARKETMONEY`,s.`MAINMARKETPREMONEY`,s.`PARENTRSADTLID`,s.`SHOPPEFLAG`,s.`COMBINEGOODSQTY`,s.`REDUCEDPRICE`,s.`REDUCEDMONEY`,s.`COMBPREMONEY`,s.`COMBPRICE`,s.`RECIPEFLAG`,s.`RECIPENO`,s.`RECIPTDATE`,s.`RECIPEHOSPITAL`,s.`RECIPEDOCTOR`,s.`SKCERTID`,s.`MEMO`,s.`ZXCOLUMN1`,s.`ZXCOLUMN2`,s.`ZXCOLUMN3`,s.`ZXCOLUMN4`,s.`ZXCOLUMN5`,s.`COSTINGPRICE`,s.`COSTINGMONEY`,s.`NOPROMFLAG`,s.`GROUPREQDTLID`,s.`MAININTEGPREMONEY`,s.`MAINVOUCHPREMONEY`,s.`INSPOINTSFLAG`,s.`INSDISCFLAG`,s.`NOUSEVOUFLAG`,s.`ISLIMIT`,s.`DTLINTEGRAL`,s.`EXAMPRICE`,s.`ACCFLAG`,s.`ECODES`,s.`PEIFANGMANID`,s.`SHENFANGMANID`,s.`IGNOREMONEY`,s.`POLICYNO`,s.`ISPOLICY`,s.`POLICYNAME`,s.`INVOICEITEM`,s.`ISPRECIOUS`,s.`GETMONEYLEVEL`,s.`DISCOUNTRATE`,s.`DISCOUNTUPLIMIT`,s.`CUSTOMNAME`,s.`IDCARD`,s.`TELEPHONE`,s.`SPLITMANID`,s.`CHECKMANID`,s.`SPLITDATE`,s.`FUHEMANID`,s.`BREAKGOODSQTY`,s.`BREAKGOODSUNIT`,s.`BREAKPRICE`,s.`GENFACSINGLEREBFLAG`,s.`GENSUPSINGLEREBFLAG`,s.`GENFACTOTALREBFLAG`,s.`GENSUPTOTALREBFLAG`,s.`INSERTMONEY`,s.`ZX_OLDGOODSQTY`,s.`INVDATE`,s.`INVNO`,s.`INVOICEFLAG`,s.`INVCODE`,s.`INVCUSTOMNAME`,s.`ORDERDTLID`,s.`ISCODEFLAG`,s.`ZX_TOGBYBDATE`,s.`ZX_TOGBYBFLAG`,s.`INVOADDRESS`,s.`ZX_SCANTRACECODE_FLAG`,s.`CREDATE`,s.`dw_id`,s.`dw_createtime`,s.`dw_updatetime`,s.`is_active`
        FROM gresa_sa_dtl_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM gresa_sa_dtl WHERE s.RSADTLID = GRESA_SA_DTL.RSADTLID AND s.DW_ID = GRESA_SA_DTL.DW_ID AND GRESA_SA_DTL.IS_ACTIVE=1);
        DROP TABLE gresa_sa_dtl_doristmp;
        UPDATE GRESA_SA_DTL SET is_active = 0;
        CREATE TABLE IF NOT EXISTS GRESA_SA_DTL_latest_records AS
        SELECT 
            RSADTLID,
            MAX(dw_createtime) AS dw_createtime
        FROM GRESA_SA_DTL
        GROUP BY RSADTLID;
        UPDATE GRESA_SA_DTL SET is_active = 1
        FROM GRESA_SA_DTL_latest_records
        WHERE GRESA_SA_DTL.dw_createtime = GRESA_SA_DTL_latest_records.dw_createtime AND 
        GRESA_SA_DTL.dw_createtime = GRESA_SA_DTL.dw_updatetime AND 
            GRESA_SA_DTL.RSADTLID=GRESA_SA_DTL_latest_records.RSADTLID;
        DROP TABLE IF EXISTS GRESA_SA_DTL_latest_records;

  - name: BMS_ST_IO_DTL_d_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    deps: [GRESA_SA_DTL_d_ods_update]
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.BMS_ST_IO_DTL"
            query = """select t.IODTLID, ora_hash(substr(coalesce(substr(to_char(t.IODTLID), 1,255), '') || coalesce(substr(to_char(t.INOUTID), 1,255), '') || coalesce(substr(to_char(t.BATCHID), 1,255), '') || coalesce(substr(to_char(t.LOTID), 1,255), '') || coalesce(substr(to_char(t.POSID), 1,255), '') || coalesce(substr(to_char(t.GOODSDTLID), 1,255), '') || coalesce(substr(to_char(t.GOODSSTATUSID), 1,255), '') || coalesce(substr(to_char(t.DTLGOODSQTY), 1,255), '') || coalesce(substr(to_char(t.PICKDOCID), 1,255), '') || coalesce(substr(to_char(t.DTLPRINTNO), 1,255), '') || coalesce(substr(to_char(t.DTLPRINTLINE), 1,255), '') || coalesce(substr(to_char(t.GSPLSFLAG), 1,255), '') || coalesce(substr(to_char(t.GSPCALLBKFLAG), 1,255), '') || coalesce(substr(to_char(t.GSPFLAG), 1,255), '') || coalesce(substr(to_char(t.BOXSCOPE), 1,255), '') || coalesce(substr(to_char(t.CHECKMANID), 1,255), '') || coalesce(substr(to_char(t.CHECKDATE), 1,255), '') || coalesce(substr(to_char(t.CHECKSTATUS), 1,255), '') || coalesce(substr(to_char(t.BOXUPFLAG), 1,255), '') || coalesce(substr(to_char(t.CHKQTY), 1,255), '') || coalesce(substr(to_char(t.CHECKMANID2), 1,255), '') || coalesce(substr(to_char(t.WMSPROFLAG), 1,255), '') || coalesce(substr(to_char(t.QTYSAVE), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.INOUTID,t.BATCHID,t.LOTID,t.POSID,t.GOODSDTLID,t.GOODSSTATUSID,t.DTLGOODSQTY,t.PICKDOCID,t.DTLPRINTNO,t.DTLPRINTLINE,t.GSPLSFLAG,t.GSPCALLBKFLAG,t.GSPFLAG,t.BOXSCOPE,t.CHECKMANID,t.CHECKDATE,t.CHECKSTATUS,t.BOXUPFLAG,t.CHKQTY,t.CHECKMANID2,t.WMSPROFLAG,t.QTYSAVE,t1.CREDATE from BMS_ST_IO_DTL t LEFT JOIN BMS_ST_IO_DOC t1 ON t.INOUTID=t1.INOUTID WHERE (t.CHECKDATE is not NULL AND t.CHECKDATE >= TRUNC(SYSDATE-60)) OR (t1.CREDATE is not NULL AND t1.CREDATE >= TRUNC(SYSDATE-60)) OR (t.CHECKDATE is NULL AND t1.CREDATE is NULL)"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(IODTLID,DW_ID)
              DISTRIBUTED BY HASH (IODTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: BMS_ST_IO_DTL_d_ods_update
    task_type: Sql
    fail_retry_times: 1
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: YES
    deps: [BMS_ST_IO_DTL_d_ods_tmp]
    sql: |
        UPDATE bms_st_io_dtl t
        SET t.dw_updatetime = NOW(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM bms_st_io_dtl_doristmp s WHERE s.IODTLID = t.IODTLID AND s.DW_ID = t.DW_ID)  AND ((t.`CHECKDATE` is not null AND t.`CHECKDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`CREDATE` is not null AND t.`CREDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR ((t.`CHECKDATE` is null) AND (t.`CREDATE` is null)));
        INSERT INTO bms_st_io_dtl (`IODTLID`,`INOUTID`,`BATCHID`,`LOTID`,`POSID`,`GOODSDTLID`,`GOODSSTATUSID`,`DTLGOODSQTY`,`PICKDOCID`,`DTLPRINTNO`,`DTLPRINTLINE`,`GSPLSFLAG`,`GSPCALLBKFLAG`,`GSPFLAG`,`BOXSCOPE`,`CHECKMANID`,`CHECKDATE`,`CHECKSTATUS`,`BOXUPFLAG`,`CHKQTY`,`CHECKMANID2`,`WMSPROFLAG`,`QTYSAVE`,`CREDATE`,`dw_id`,`dw_createtime`,`dw_updatetime`,`is_active`)
        SELECT s.`IODTLID`,s.`INOUTID`,s.`BATCHID`,s.`LOTID`,s.`POSID`,s.`GOODSDTLID`,s.`GOODSSTATUSID`,s.`DTLGOODSQTY`,s.`PICKDOCID`,s.`DTLPRINTNO`,s.`DTLPRINTLINE`,s.`GSPLSFLAG`,s.`GSPCALLBKFLAG`,s.`GSPFLAG`,s.`BOXSCOPE`,s.`CHECKMANID`,s.`CHECKDATE`,s.`CHECKSTATUS`,s.`BOXUPFLAG`,s.`CHKQTY`,s.`CHECKMANID2`,s.`WMSPROFLAG`,s.`QTYSAVE`,s.`CREDATE`,s.`dw_id`,s.`dw_createtime`,s.`dw_updatetime`,s.`is_active`
        FROM bms_st_io_dtl_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM bms_st_io_dtl WHERE s.IODTLID = BMS_ST_IO_DTL.IODTLID AND s.DW_ID = BMS_ST_IO_DTL.DW_ID AND BMS_ST_IO_DTL.IS_ACTIVE=1);
        DROP TABLE bms_st_io_dtl_doristmp;
        UPDATE BMS_ST_IO_DTL SET is_active = 0;
        CREATE TABLE IF NOT EXISTS BMS_ST_IO_DTL_latest_records AS
        SELECT 
            IODTLID,
            MAX(dw_createtime) AS dw_createtime
        FROM BMS_ST_IO_DTL
        GROUP BY IODTLID;
        UPDATE BMS_ST_IO_DTL SET is_active = 1
        FROM BMS_ST_IO_DTL_latest_records
        WHERE BMS_ST_IO_DTL.dw_createtime = BMS_ST_IO_DTL_latest_records.dw_createtime AND 
        BMS_ST_IO_DTL.dw_createtime = BMS_ST_IO_DTL.dw_updatetime AND 
            BMS_ST_IO_DTL.IODTLID=BMS_ST_IO_DTL_latest_records.IODTLID;
        DROP TABLE IF EXISTS BMS_ST_IO_DTL_latest_records;

  - name: GPCS_REQSUPPLYDTL_d_ods_tmp
    task_type: SeaTunnel
    fail_retry_times: 4
    fail_retry_interval: 5
    startup_script: "seatunnel.sh"
    use_custom: true
    deploy_mode: "cluster"
    flag: YES
    deps: [BMS_ST_IO_DTL_d_ods_update]
    raw_script: |
        env{
          parallelism = 2
          job.mode = "BATCH"
        }
        source{
          Jdbc {
            url = "jdbc:oracle:thin:@10.10.10.202:1521/luyandg"
            driver = "oracle.jdbc.OracleDriver"
            connection_check_timeout_sec = 100
            decimal_type_narrowing = false
            user = "lyerp"
            password = "lyerp"
            table_path = "lyerp.GPCS_REQSUPPLYDTL"
            query = """select t.REQSUPPLYDTLID, ora_hash(substr(coalesce(substr(to_char(t.REQSUPPLYDTLID), 1,255), '') || coalesce(substr(to_char(t.REQSUPPLYID), 1,255), '') || coalesce(substr(to_char(t.PRINTNO), 1,255), '') || coalesce(substr(to_char(t.PRINTLINE), 1,255), '') || coalesce(substr(to_char(t.GOODSID), 1,255), '') || coalesce(substr(to_char(t.GOODSDTLID), 1,255), '') || coalesce(substr(to_char(t.GOODSQTY), 1,255), '') || coalesce(substr(to_char(t.CHANGEABLE), 1,255), '') || coalesce(substr(to_char(t.REQSPLITFLAG), 1,255), '') || coalesce(substr(to_char(t.USESTATUS), 1,255), '') || coalesce(substr(to_char(t.TOTALGOODSQTY), 1,255), '') || coalesce(substr(to_char(t.TOTALREFUSEQTY), 1,255), '') || coalesce(substr(to_char(t.MEMO), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN1), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN2), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN3), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN4), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN5), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN6), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN7), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN8), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN9), 1,255), '') || coalesce(substr(to_char(t.ZXCOLUMN10), 1,255), '') || coalesce(substr(to_char(t.PLACEQTY), 1,255), '') || coalesce(substr(to_char(t.OOSREC_FLAG), 1,255), '') || coalesce(substr(to_char(t.ENTRYMEMO), 1,255), '') || coalesce(substr(to_char(t.OLDREQSUPPLYDTLID), 1,255), '') || coalesce(substr(to_char(t.CHANGEFLAG), 1,255), '') || coalesce(substr(to_char(t.PRICE), 1,255), '') || coalesce(substr(to_char(t.MEMO2), 1,255), '') || coalesce(substr(to_char(t.UNFLAG), 1,255), '') || coalesce(substr(to_char(t.DEFINITIONDTLCOUNT), 1,255), '') || coalesce(substr(to_char(t.DEFINITIONENFORCEMENT), 1,255), '') || coalesce(substr(to_char(t.OREQSUPPLYDTLID), 1,255), '') || coalesce(substr(to_char(t.DEFINITIONID), 1,255), '') || coalesce(substr(to_char(t.DEFINITIONNAME), 1,255), ''), 1,4000)) as DW_ID, SYSDATE as dw_createtime, SYSDATE as dw_updatetime, 1 as is_active,t.REQSUPPLYID,t.PRINTNO,t.PRINTLINE,t.GOODSID,t.GOODSDTLID,t.GOODSQTY,t.CHANGEABLE,t.REQSPLITFLAG,t.USESTATUS,t.TOTALGOODSQTY,t.TOTALREFUSEQTY,t.MEMO,t.ZXCOLUMN1,t.ZXCOLUMN2,t.ZXCOLUMN3,t.ZXCOLUMN4,t.ZXCOLUMN5,t.ZXCOLUMN6,t.ZXCOLUMN7,t.ZXCOLUMN8,t.ZXCOLUMN9,t.ZXCOLUMN10,t.PLACEQTY,t.OOSREC_FLAG,t.ENTRYMEMO,t.OLDREQSUPPLYDTLID,t.CHANGEFLAG,t.PRICE,t.MEMO2,t.UNFLAG,t.DEFINITIONDTLCOUNT,t.DEFINITIONENFORCEMENT,t.OREQSUPPLYDTLID,t.DEFINITIONID,t.DEFINITIONNAME,t1.REQDATE from GPCS_REQSUPPLYDTL t LEFT JOIN GPCS_REQSUPPLY t1 ON t.REQSUPPLYID=t1.REQSUPPLYID WHERE (t.ZXCOLUMN9 is not NULL AND t.ZXCOLUMN9 >= TRUNC(SYSDATE-60)) OR (t.ZXCOLUMN10 is not NULL AND t.ZXCOLUMN10 >= TRUNC(SYSDATE-60)) OR (t1.REQDATE is not NULL AND t1.REQDATE >= TRUNC(SYSDATE-60)) OR (t.ZXCOLUMN9 is NULL AND t.ZXCOLUMN10 is NULL AND t1.REQDATE is NULL)"""
          }
        }
        sink{
          Doris {
            fenodes = "10.60.10.13:8030"
            username = "root"
            password = "doris123"
            database = "ods_erp"
            table = "${table_name}_doristmp"
            data_save_mode = DROP_DATA
            save_mode_create_template = """
              CREATE TABLE IF NOT EXISTS `${database}`.`${table}` (
                  ${rowtype_fields}
              ) ENGINE=OLAP
              UNIQUE KEY(REQSUPPLYDTLID,DW_ID)
              DISTRIBUTED BY HASH (REQSUPPLYDTLID,DW_ID)
              PROPERTIES (
                  "replication_allocation" = "tag.location.default: 1",
                  "in_memory" = "false",
                  "storage_format" = "V2",
                  "disable_auto_compaction" = "false"
              )
            """
            doris.config = {
              format = "json"
              read_json_by_line="true"
            }
          }
        }

  - name: GPCS_REQSUPPLYDTL_d_ods_update
    task_type: Sql
    fail_retry_times: 1
    fail_retry_interval: 5
    datasource_name: "ods_erp"
    flag: YES
    deps: [GPCS_REQSUPPLYDTL_d_ods_tmp]
    sql: |
        UPDATE gpcs_reqsupplydtl t
        SET t.dw_updatetime = NOW(), t.is_active = 0 
        WHERE t.is_active=1 AND NOT EXISTS (SELECT 1 FROM gpcs_reqsupplydtl_doristmp s WHERE s.REQSUPPLYDTLID = t.REQSUPPLYDTLID AND s.DW_ID = t.DW_ID)  AND ((t.`ZXCOLUMN9` is not null AND t.`ZXCOLUMN9` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`ZXCOLUMN10` is not null AND t.`ZXCOLUMN10` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR (t.`REQDATE` is not null AND t.`REQDATE` > date_sub(CURDATE(), INTERVAL 60 DAY)) OR ((t.`ZXCOLUMN9` is null) AND (t.`ZXCOLUMN10` is null) AND (t.`REQDATE` is null)));
        INSERT INTO gpcs_reqsupplydtl (`REQSUPPLYDTLID`,`REQSUPPLYID`,`PRINTNO`,`PRINTLINE`,`GOODSID`,`GOODSDTLID`,`GOODSQTY`,`CHANGEABLE`,`REQSPLITFLAG`,`USESTATUS`,`TOTALGOODSQTY`,`TOTALREFUSEQTY`,`MEMO`,`ZXCOLUMN1`,`ZXCOLUMN2`,`ZXCOLUMN3`,`ZXCOLUMN4`,`ZXCOLUMN5`,`ZXCOLUMN6`,`ZXCOLUMN7`,`ZXCOLUMN8`,`ZXCOLUMN9`,`ZXCOLUMN10`,`PLACEQTY`,`OOSREC_FLAG`,`ENTRYMEMO`,`OLDREQSUPPLYDTLID`,`CHANGEFLAG`,`PRICE`,`MEMO2`,`UNFLAG`,`DEFINITIONDTLCOUNT`,`DEFINITIONENFORCEMENT`,`OREQSUPPLYDTLID`,`DEFINITIONID`,`DEFINITIONNAME`,`REQDATE`,`dw_id`,`dw_createtime`,`dw_updatetime`,`is_active`)
        SELECT s.`REQSUPPLYDTLID`,s.`REQSUPPLYID`,s.`PRINTNO`,s.`PRINTLINE`,s.`GOODSID`,s.`GOODSDTLID`,s.`GOODSQTY`,s.`CHANGEABLE`,s.`REQSPLITFLAG`,s.`USESTATUS`,s.`TOTALGOODSQTY`,s.`TOTALREFUSEQTY`,s.`MEMO`,s.`ZXCOLUMN1`,s.`ZXCOLUMN2`,s.`ZXCOLUMN3`,s.`ZXCOLUMN4`,s.`ZXCOLUMN5`,s.`ZXCOLUMN6`,s.`ZXCOLUMN7`,s.`ZXCOLUMN8`,s.`ZXCOLUMN9`,s.`ZXCOLUMN10`,s.`PLACEQTY`,s.`OOSREC_FLAG`,s.`ENTRYMEMO`,s.`OLDREQSUPPLYDTLID`,s.`CHANGEFLAG`,s.`PRICE`,s.`MEMO2`,s.`UNFLAG`,s.`DEFINITIONDTLCOUNT`,s.`DEFINITIONENFORCEMENT`,s.`OREQSUPPLYDTLID`,s.`DEFINITIONID`,s.`DEFINITIONNAME`,s.`REQDATE`,s.`dw_id`,s.`dw_createtime`,s.`dw_updatetime`,s.`is_active`
        FROM gpcs_reqsupplydtl_doristmp s
        WHERE NOT EXISTS (SELECT 1 FROM gpcs_reqsupplydtl WHERE s.REQSUPPLYDTLID = GPCS_REQSUPPLYDTL.REQSUPPLYDTLID AND s.DW_ID = GPCS_REQSUPPLYDTL.DW_ID AND GPCS_REQSUPPLYDTL.IS_ACTIVE=1);
        DROP TABLE gpcs_reqsupplydtl_doristmp;
        UPDATE GPCS_REQSUPPLYDTL SET is_active = 0;
        CREATE TABLE IF NOT EXISTS GPCS_REQSUPPLYDTL_latest_records AS
        SELECT 
            REQSUPPLYDTLID,
            MAX(dw_createtime) AS dw_createtime
        FROM GPCS_REQSUPPLYDTL
        GROUP BY REQSUPPLYDTLID;
        UPDATE GPCS_REQSUPPLYDTL SET is_active = 1
        FROM GPCS_REQSUPPLYDTL_latest_records
        WHERE GPCS_REQSUPPLYDTL.dw_createtime = GPCS_REQSUPPLYDTL_latest_records.dw_createtime AND 
        GPCS_REQSUPPLYDTL.dw_createtime = GPCS_REQSUPPLYDTL.dw_updatetime AND 
            GPCS_REQSUPPLYDTL.REQSUPPLYDTLID=GPCS_REQSUPPLYDTL_latest_records.REQSUPPLYDTLID;
        DROP TABLE IF EXISTS GPCS_REQSUPPLYDTL_latest_records;

